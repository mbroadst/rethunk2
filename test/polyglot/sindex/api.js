#!/usr/local/bin/node
// -*- coding: utf-8 -*-

'use strict';
const common = require('../common'),
      setup_table = common.setup_table,
      setup_table_check = common.setup_table_check,
      test = common.test,
      define = common.define,
      the_end = common.the_end;

setup_table('tbl', 'polyglot_sindex_api_js7_2', 'test')
setup_table_check()

define("[{'id':0, 'a':0, 'b':0, 'c':0, 'm':[1,2,3]},\n{'id':1, 'a':0, 'b':0, 'c':0, 'm':[4,5,6]},\n{'id':2, 'a':0, 'b':0, 'c':1, 'm':7},\n{'id':3, 'a':0, 'b':1, 'c':1, 'm':[10,11,12]},\n{'id':4, 'a':4, 'b':4, 'c':4, 'm':[14,15,16]}]", 'rows')
test("tbl.insert([{'id':0, 'a':0, 'b':0, 'c':0, 'm':[1,2,3]},\n{'id':1, 'a':0, 'b':0, 'c':0, 'm':[4,5,6]},\n{'id':2, 'a':0, 'b':0, 'c':1, 'm':7},\n{'id':3, 'a':0, 'b':1, 'c':1, 'm':[10,11,12]}])", "({'deleted':0,'inserted':4,'skipped':0,'errors':0,'replaced':0,'unchanged':0})", 'line 11', {}, {})
test("tbl.indexCreate('rename-foo', r.row('b'))", "({'created':1})", 'line 19', {}, {})
test("tbl.indexCreate('rename-bar', r.row('c'))", "({'created':1})", 'line 24', {}, {})
test("tbl.indexRename('rename-foo','rename-bar')", "err_regex('ReqlOpFailedError','Index `rename-foo` does not exist or index `rename-bar` already exists on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]',[])", 'line 28', {}, {})
test("tbl.indexRename('rename-fake','rename-stuff')", "err_regex('ReqlOpFailedError','Index `rename-fake` does not exist or index `rename-stuff` already exists on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]',[])", 'line 31', {}, {})
test("tbl.indexRename('id','rename-stuff')", "err('ReqlQueryLogicError','Index name conflict:'+' `id` is the name of the primary key.',[])", 'line 34', {}, {})
test("tbl.indexRename('rename-stuff','id')", "err('ReqlQueryLogicError','Index name conflict:'+' `id` is the name of the primary key.',[])", 'line 37', {}, {})
test("tbl.indexRename('rename-foo','rename-foo')", "({'renamed':0})", 'line 40', {}, {})
test("tbl.indexRename('rename-foo','rename-foo',{overwrite:true})", "({'renamed':0})", 'line 44', {}, {})
test("tbl.indexRename('rename-foo','rename-bar',{overwrite:true})", "({'renamed':1})", 'line 49', {}, {})
test("tbl.indexRename('rename-bar','rename-stuff',{overwrite:true})", "({'renamed':1})", 'line 54', {}, {})
test("tbl.indexRename('rename-stuff','rename-last')", "({'renamed':1})", 'line 58', {}, {})
test("tbl.indexCreate('minval', function(row){ return r.minval; })", "({'created':1})", 'line 63', {}, {})
test("tbl.indexCreate('maxval', function(row){ return r.maxval; })", "({'created':1})", 'line 68', {}, {})
test("tbl.indexWait('rename-last', 'minval', 'maxval').pluck('index', 'ready')", "bag([{'index':'rename-last','ready':true},\n{'index':'minval','ready':true},\n{'index':'maxval','ready':true}])", 'line 71', {}, {})
test("tbl.getAll(0, {index:'rename-last'}).count()", '3', 'line 77', {}, {})
test("tbl.getAll(r.minval, {index:'minval'}).count()", '0', 'line 83', {}, {})
test("tbl.getAll(r.maxval, {index:'maxval'}).count()", '0', 'line 88', {}, {})
test("tbl.between(r.minval, r.maxval, {index:'minval'}).count()", '0', 'line 93', {}, {})
test("tbl.indexCreate('rename-last-dup', tbl.indexStatus('rename-last').nth(0).getField('function'))", "({'created':1})", 'line 97', {}, {})
test("tbl.indexWait('rename-last-dup').pluck('index', 'ready')", "[{'index':'rename-last-dup','ready':true}]", 'line 100', {}, {})
test("tbl.getAll(0, {index:'rename-last-dup'}).count()", '3', 'line 104', {}, {})
test("tbl.indexDrop('rename-last-dup')", "({'dropped':1})", 'line 109', {}, {})
test("tbl.indexDrop('minval')", "({'dropped':1})", 'line 110', {}, {})
test("tbl.indexDrop('maxval')", "({'dropped':1})", 'line 111', {}, {})
test('tbl.indexList()', "['rename-last']", 'line 114', {}, {})
test("tbl.indexDrop('rename-last')", "({'dropped':1})", 'line 117', {}, {})
test("tbl.indexCreate('ai', r.row('a'))", "({'created':1})", 'line 122', {}, {})
test("tbl.indexCreate('ai', r.row('a'))", 'err_regex("ReqlOpFailedError", "Index `ai` already exists on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", [])', 'line 126', {}, {})
test("tbl.indexCreate('bi', r.row('b'))", "({'created':1})", 'line 130', {}, {})
test("tbl.indexCreate('ci', r.row('c'))", "({'created':1})", 'line 134', {}, {})
test("tbl.indexCreate('idi', r.row('id'))", "({'created':1})", 'line 138', {}, {})
test("tbl.indexCreate('kdi', [r.row('id')])", "({'created':1})", 'line 142', {}, {})
test('tbl.indexCreate(\'mi\', r.row(\'m\'), {"multi":true})', "({'created':1})", 'line 146', {}, {})
test("tbl.indexCreate('brokeni', r.row('broken'))", "({'created':1})", 'line 150', {}, {})
test("tbl.indexWait().pluck('index', 'ready')", "", 'line 153', {}, {})
test('tbl.get(true)', "", 'line 155', {}, {})
test('tbl.get([])', 'null', 'line 159', {}, {})
test('tbl.get(-1)', 'null', 'line 161', {}, {})
test("tbl.get(1)('id')", '1', 'line 165', {}, {})
test('tbl.get(1).typeOf()', "'SELECTION<OBJECT>'", 'line 169', {}, {})
test('tbl.get(1).update(function(x) { return null;})', "({'replaced':0,'skipped':0,'deleted':0,'unchanged':1,'errors':0,'inserted':0})", 'line 173', {}, {})
test("tbl.get(1, 'ai')", 'err("ReqlCompileError", "Expected 2 arguments but found 3.", [])', 'line 176', {}, {})
test("tbl.getAll(true, {index:'id'})", "", 'line 181', {}, {})
test("tbl.getAll(-1, {index:'id'})", '[]', 'line 186', {}, {})
test('tbl.getAll(-1)', '[]', 'line 190', {}, {})
test('tbl.getAll([-1])', '[]', 'line 194', {}, {})
test("tbl.getAll(1, {index:'id'}).nth(0)('id')", '1', 'line 198', {}, {})
test("tbl.getAll(1).nth(0)('id')", '1', 'line 202', {}, {})
test('tbl.getAll(1,2,3, {index:\'id\'}).map(function (x) { return x("id"); }).coerceTo("ARRAY")', 'bag([1,2,3])', 'line 206', {}, {})
test('tbl.getAll(1,2,3).map(function (x) { return x("id"); }).coerceTo("ARRAY")', 'bag([1,2,3])', 'line 210', {}, {})
test("tbl.getAll(1, {index:'id'}).typeOf()", "'SELECTION<STREAM>'", 'line 214', {}, {})
test('tbl.getAll(1).typeOf()', "'SELECTION<STREAM>'", 'line 218', {}, {})
test("tbl.getAll(1, {index:'id'}).update(function(x) { return null; })", "({'replaced':0,'skipped':0,'deleted':0,'unchanged':1,'errors':0,'inserted':0})", 'line 222', {}, {})
test('tbl.getAll(1).update(function(x) { return null; })', "({'replaced':0,'skipped':0,'deleted':0,'unchanged':1,'errors':0,'inserted':0})", 'line 226', {}, {})
test("tbl.getAll(1,2,3, {index:'id'}).update(function(x) { return null; })", "({'replaced':0,'skipped':0,'deleted':0,'unchanged':3,'errors':0,'inserted':0})", 'line 230', {}, {})
test('tbl.getAll(1,2,3).update(function(x) { return null; })', "({'replaced':0,'skipped':0,'deleted':0,'unchanged':3,'errors':0,'inserted':0})", 'line 234', {}, {})
test("tbl.getAll(0, {index:'fake'})", 'err_regex("ReqlOpFailedError", "Index `fake` was not found on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", [])', 'line 239', {}, {})
test('tbl.getAll(r.point(0, 0))', 'err("ReqlQueryLogicError", "Cannot use a geospatial index with `get_all`. Use `get_intersecting` instead.", [])', 'line 242', {}, {})
test('tbl.getAll(0, {index:false})', 'err("ReqlQueryLogicError", "Expected type STRING but found BOOL.", [])', 'line 247', {}, {})
test("tbl.getAll(true, {index:'id'})", "", 'line 252', {}, {})
test("tbl.getAll([], {index:'id'})", '[]', 'line 257', {}, {})
test("tbl.getAll(true, {index:'idi'})", "", 'line 261', {}, {})
test("tbl.getAll([], {index:'idi'})", '[]', 'line 266', {}, {})
test("tbl.getAll(1, {index:'id'}).nth(0)('id')", '1', 'line 271', {}, {})
test("tbl.getAll(1, {index:'idi'}).nth(0)('id')", '1', 'line 275', {}, {})
test("tbl.getAll(1, {index:'ai'})", '[]', 'line 279', {}, {})
test("tbl.getAll(1, {index:'bi'}).orderBy('id').map(function(x) { return x('id'); })", '[3]', 'line 283', {}, {})
test("tbl.getAll(1, {index:'bi'}).orderBy({index:'id'}).map(function(x) { return x('id'); })", "err('ReqlQueryLogicError', 'Indexed order_by can only be performed on a TABLE or TABLE_SLICE.', [0])", 'line 287', {}, {})
test("tbl.getAll(1, {index:'bi'}).between(1, 1, {index:'id'}).map(function(x) { return x('id'); })", "err('ReqlQueryLogicError', 'Expected type TABLE_SLICE but found SELECTION:', [0])", 'line 291', {}, {})
test("tbl.getAll(1, {index:'ci'}).orderBy('id').map(function(x) { return x('id'); })", '[2, 3]', 'line 295', {}, {})
test("tbl.getAll(1, {index:'ci'}).typeOf()", "'SELECTION<STREAM>'", 'line 299', {}, {})
test("tbl.getAll(1, {index:'ci'}).update(function(x) { return null; })", "({'replaced':0,'skipped':0,'deleted':0,'unchanged':2,'errors':0,'inserted':0})", 'line 303', {}, {})
test("tbl.getAll(1, {index:'brokeni'})", '[]', 'line 307', {}, {})
test("tbl.getAll(1, {index:'mi'})", '[rows[0]]', 'line 312', {}, {})
test("tbl.getAll(2, {index:'mi'})", '[rows[0]]', 'line 317', {}, {})
test("tbl.getAll(5, {index:'mi'})", '[rows[1]]', 'line 322', {}, {})
test("tbl.getAll(7, {index:'mi'})", '[rows[2]]', 'line 327', {}, {})
test("tbl.eqJoin('id', tbl, {index:'fake'})", 'err_regex("ReqlOpFailedError", "Index `fake` was not found on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", [])', 'line 332', {}, {})
test("tbl.eqJoin('id', tbl, {index:false})", 'err("ReqlQueryLogicError", "Expected type STRING but found BOOL.", [])', 'line 336', {}, {})
test("tbl.filter({id:1}).eqJoin('id', tbl, {index:'mi'})", "[{'left':rows[1],'right':rows[0]}]", 'line 341', {}, {})
test("tbl.filter({'id':0}).eqJoin('id', tbl)", "[{'left':rows[0],'right':rows[0]}]", 'line 346', {}, {})
test("tbl.filter({'id':0}).eqJoin(function (x) { return x('id'); }, tbl)", "[{'left':rows[0],'right':rows[0]}]", 'line 351', {}, {})
test("tbl.filter({'id':0}).eqJoin('id', tbl, {index:'id'})", "[{'left':rows[0],'right':rows[0]}]", 'line 356', {}, {})
test("tbl.filter({'id':0}).eqJoin(function (x) { return x('id'); }, tbl, {index:'id'})", "[{'left':rows[0],'right':rows[0]}]", 'line 361', {}, {})
test("tbl.filter({'id':0}).eqJoin('id', tbl, {index:'idi'})", "[{'left':rows[0],'right':rows[0]}]", 'line 366', {}, {})
test("tbl.filter({'id':0}).eqJoin(function (x) { return x('id'); }, tbl, {index:'idi'})", "[{'left':rows[0],'right':rows[0]}]", 'line 371', {}, {})
test("tbl.filter({'id':0}).eqJoin('id', tbl, {index:'ai'}).orderBy('right')", "[{'right':rows[0],'left':rows[0]},\n{'right':rows[1],'left':rows[0]},\n{'right':rows[2],'left':rows[0]},\n{'right':rows[3],'left':rows[0]}]", 'line 376', {}, {})
test("tbl.filter({'id':0}).eqJoin('id', tbl, {index:'bi'}).orderBy('right')", "([{'right':rows[0],'left':rows[0]},\n{'right':rows[1],'left':rows[0]},\n{'right':rows[2],'left':rows[0]}])", 'line 383', {}, {})
test("tbl.filter({'id':0}).eqJoin('id', tbl, {index:'ci'}).orderBy('right')", "[{'right':rows[0],'left':rows[0]}, {'right':rows[1],'left':rows[0]}]", 'line 389', {}, {})
test("tbl.filter({'id':0}).eqJoin('id', tbl, {index:'brokeni'})", '[]', 'line 393', {}, {})
test("tbl.eqJoin('c', tbl, {index:'bi'}).orderBy('right', 'left')", "[{'left':rows[0],'right':rows[0]},\n{'left':rows[1],'right':rows[0]},\n{'left':rows[0],'right':rows[1]},\n{'left':rows[1],'right':rows[1]},\n{'left':rows[0],'right':rows[2]},\n{'left':rows[1],'right':rows[2]},\n{'left':rows[2],'right':rows[3]},\n{'left':rows[3],'right':rows[3]}]", 'line 398', {}, {})
test("tbl.indexCreate('id')", 'err("ReqlQueryLogicError", "Index name conflict: `id` is the name of the primary key.", [])', 'line 408', {}, {})
test("tbl.indexCreate('c')", "({'created':1})", 'line 411', {}, {})
test("tbl.indexCreate('broken')", "({'created':1})", 'line 413', {}, {})
test("tbl.indexWait('broken')", "", 'line 416', {}, {})
test("tbl.getAll(1, {index:'c'}).orderBy('id').map(function(x) { return x('id'); })", '[2, 3]', 'line 420', {}, {})
test("tbl.getAll(1, {index:'broken'}).orderBy('broken').map(function(x) { return x('id'); })", '[]', 'line 424', {}, {})
test("tbl.indexCreate('nil', function(x) { return null; })", "({'created':1})", 'line 429', {}, {})
test("tbl.indexWait().pluck('index', 'ready')", "", 'line 431', {}, {})
test("tbl.getAll(null, {index:'nil'})", 'err("ReqlNonExistenceError", "Keys cannot be NULL.", [])', 'line 435', {}, {})
test("tbl.insert({'id':4, 'a':4, 'b':4, 'c':4, 'm':[14,15,16]})", "({'deleted':0,'inserted':1,'skipped':0,'errors':0,'replaced':0,'unchanged':0})", 'line 439', {}, {})
test('tbl.eqJoin(\'id\', tbl, {index:\'c\'}).orderBy(\'left\', \'right\').coerceTo("ARRAY")', "[{'right':rows[0],'left':rows[0]},\n{'right':rows[1],'left':rows[0]},\n{'right':rows[2],'left':rows[1]},\n{'right':rows[3],'left':rows[1]},\n{'right':rows[4],'left':rows[4]}]", 'line 447', {}, {})
test("tbl.eqJoin('id', tbl, {index:'ci'}).orderBy('left', 'right')", "[{'right':rows[0],'left':rows[0]},\n{'right':rows[1],'left':rows[0]},\n{'right':rows[2],'left':rows[1]},\n{'right':rows[3],'left':rows[1]},\n{'right':rows[4],'left':rows[4]}]", 'line 456', {}, {})
test("tbl.between(null, 2, {index:'id'}).count()", "err('ReqlQueryLogicError', 'Cannot use `nu' + 'll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.')", 'line 469', {}, {})
test("tbl.between(2, null, {index:'id'}).count()", "err('ReqlQueryLogicError', 'Cannot use `nu' + 'll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.')", 'line 470', {}, {})
test("tbl.between(r.minval, null, {index:'id'}).count()", "err('ReqlQueryLogicError', 'Cannot use `nu' + 'll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.')", 'line 471', {}, {})
test("tbl.between(r.minval, r.maxval).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 480', {}, {})
test("tbl.between(r.minval, r.maxval).orderBy({index:'id'}).map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 484', {}, {})
test("tbl.between(r.minval, r.maxval).between(r.minval, r.maxval).map(function(x) { return x('id'); })", "err('ReqlQueryLogicError', 'Cannot perform multiple BETWEENs on the same table.', [0])", 'line 488', {}, {})
test("tbl.orderBy({index:'id'}).between(r.minval, 3).map(function(x) { return x('id'); })", '[0, 1, 2]', 'line 492', {}, {})
test("tbl.between(0, r.maxval).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 496', {}, {})
test("tbl.between(r.minval, 4).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 500', {}, {})
test("tbl.between(0, 4).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 504', {}, {})
test("tbl.between(-1, 5).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 508', {}, {})
test("tbl.between(5, 5).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 512', {}, {})
test("tbl.between(5, r.maxval).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 516', {}, {})
test("tbl.between(-1, -1).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 520', {}, {})
test("tbl.between(r.minval, -1).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 524', {}, {})
test("tbl.between(r.minval, r.maxval, {'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 529', {}, {})
test("tbl.between(0, r.maxval, {'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 533', {}, {})
test("tbl.between(r.minval, 4, {'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 537', {}, {})
test("tbl.between(0, 4, {'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 541', {}, {})
test("tbl.between(-1, 5, {'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 545', {}, {})
test("tbl.between(5, 5, {'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 549', {}, {})
test("tbl.between(5, r.maxval, {'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 553', {}, {})
test("tbl.between(-1, -1, {'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 557', {}, {})
test("tbl.between(r.minval, -1, {'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 561', {}, {})
test("tbl.between(r.minval, r.maxval, {index:'id'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 566', {}, {})
test("tbl.between(0, r.maxval, {index:'id'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 570', {}, {})
test("tbl.between(r.minval, 4, {index:'id'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 574', {}, {})
test("tbl.between(0, 4, {index:'id'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 578', {}, {})
test("tbl.between(-1, 5, {index:'id'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 582', {}, {})
test("tbl.between(5, 5, {index:'id'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 586', {}, {})
test("tbl.between(5, r.maxval, {index:'id'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 590', {}, {})
test("tbl.between(-1, -1, {index:'id'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 594', {}, {})
test("tbl.between(r.minval, -1, {index:'id'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 598', {}, {})
test("tbl.between(r.minval, r.maxval, {'index':'id', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 603', {}, {})
test("tbl.between(0, r.maxval, {'index':'id', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 607', {}, {})
test("tbl.between(r.minval, 4, {'index':'id', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 611', {}, {})
test("tbl.between(0, 4, {'index':'id', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 615', {}, {})
test("tbl.between(-1, 5, {'index':'id', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 619', {}, {})
test("tbl.between(5, 5, {'index':'id', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 623', {}, {})
test("tbl.between(5, r.maxval, {'index':'id', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 627', {}, {})
test("tbl.between(-1, -1, {'index':'id', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 631', {}, {})
test("tbl.between(r.minval, -1, {'index':'id', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 635', {}, {})
test("tbl.between(r.minval, r.maxval, {index:'idi'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 640', {}, {})
test("tbl.between(0, r.maxval, {index:'idi'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 644', {}, {})
test("tbl.between(r.minval, 4, {index:'idi'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 648', {}, {})
test("tbl.between(0, 4, {index:'idi'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 652', {}, {})
test("tbl.between(-1, 5, {index:'idi'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 656', {}, {})
test("tbl.between(5, 5 , {index:'idi'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 660', {}, {})
test("tbl.between(5, r.maxval, {index:'idi'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 664', {}, {})
test("tbl.between(-1, -1, {index:'idi'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 668', {}, {})
test("tbl.between(r.minval, -1, {index:'idi'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 672', {}, {})
test("tbl.between(r.minval, r.maxval, {'index':'idi', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 677', {}, {})
test("tbl.between(0, r.maxval, {'index':'idi', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 681', {}, {})
test("tbl.between(r.minval, 4, {'index':'idi', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 685', {}, {})
test("tbl.between(0, 4, {'index':'idi', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 689', {}, {})
test("tbl.between(-1, 5, {'index':'idi', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 693', {}, {})
test("tbl.between(5, 5 , {'index':'idi', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 697', {}, {})
test("tbl.between(5, r.maxval, {'index':'idi', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 701', {}, {})
test("tbl.between(-1, -1, {'index':'idi', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 705', {}, {})
test("tbl.between(r.minval, -1, {'index':'idi', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 709', {}, {})
test("tbl.between(r.minval, r.maxval, {index:'ai'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 714', {}, {})
test("tbl.between(0, r.maxval, {index:'ai'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 718', {}, {})
test("tbl.between(r.minval, 4, {index:'ai'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 722', {}, {})
test("tbl.between(0, 4, {index:'ai'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 726', {}, {})
test("tbl.between(0, 5, {index:'ai'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 730', {}, {})
test("tbl.between(r.minval, r.maxval, {'index':'ai', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 735', {}, {})
test("tbl.between(0, r.maxval, {'index':'ai', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 739', {}, {})
test("tbl.between(r.minval, 4, {'index':'ai', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 743', {}, {})
test("tbl.between(0, 4, {'index':'ai', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 747', {}, {})
test("tbl.between(0, 5, {'index':'ai', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 751', {}, {})
test("tbl.between(0, 3, {index:'ai'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 756', {}, {})
test("tbl.between(0, 1, {index:'ai'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 760', {}, {})
test("tbl.between(0, 0, {index:'ai'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 764', {}, {})
test("tbl.between(-1, 2, {index:'ai'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 768', {}, {})
test("tbl.between(0, 3, {'index':'ai', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 773', {}, {})
test("tbl.between(0, 1, {'index':'ai', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 777', {}, {})
test("tbl.between(0, 0, {'index':'ai', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 781', {}, {})
test("tbl.between(-1, 2, {'index':'ai', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 785', {}, {})
test("tbl.between(1, 1, {index:'ai'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 790', {}, {})
test("tbl.between(1, r.maxval, {index:'ai'}).orderBy('id').map(function(x) { return x('id'); })", '[4]', 'line 794', {}, {})
test("tbl.between(5, r.maxval, {index:'ai'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 798', {}, {})
test("tbl.between(r.minval, 0, {index:'ai'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 802', {}, {})
test("tbl.between(-1, -1, {index:'ai'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 806', {}, {})
test("tbl.between(r.minval, -1, {index:'ai'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 810', {}, {})
test("tbl.between(1, 1, {'index':'ai', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 815', {}, {})
test("tbl.between(1, r.maxval, {'index':'ai', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[4]', 'line 819', {}, {})
test("tbl.between(5, r.maxval, {'index':'ai', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 823', {}, {})
test("tbl.between(r.minval, 0, {'index':'ai', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 827', {}, {})
test("tbl.between(-1, -1, {'index':'ai', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 831', {}, {})
test("tbl.between(r.minval, -1, {'index':'ai', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 835', {}, {})
test("tbl.between(0, 1, {index:'c'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1]', 'line 840', {}, {})
test("tbl.between(-1, 1, {index:'c'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1]', 'line 844', {}, {})
test("tbl.between(r.minval, 1, {index:'c'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1]', 'line 848', {}, {})
test("tbl.between(0, r.maxval, {index:'c'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 852', {}, {})
test("tbl.between(-1, r.maxval, {index:'c'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 856', {}, {})
test("tbl.between(r.minval, r.maxval, {index:'c'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 860', {}, {})
test("tbl.between(1, r.maxval, {index:'c'}).orderBy('id').map(function(x) { return x('id'); })", '[2, 3, 4]', 'line 864', {}, {})
test("tbl.between(1, 1, {index:'c'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 868', {}, {})
test("tbl.between(0, 1, {'index':'c', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 873', {}, {})
test("tbl.between(-1, 1, {'index':'c', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 877', {}, {})
test("tbl.between(r.minval, 1, {'index':'c', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 881', {}, {})
test("tbl.between(0, r.maxval, {'index':'c', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 885', {}, {})
test("tbl.between(-1, r.maxval, {'index':'c', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 889', {}, {})
test("tbl.between(r.minval, r.maxval, {'index':'c', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 893', {}, {})
test("tbl.between(1, r.maxval, {'index':'c', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[2, 3, 4]', 'line 897', {}, {})
test("tbl.between(1, 1, {'index':'c', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[2, 3]', 'line 901', {}, {})
test("tbl.indexCreate('bc', function(row) { return [row('b'), row('c')]; })", "({'created':1})", 'line 906', {}, {})
test("tbl.indexCreate('cb', function(row) { return [row('c'), row('b')]; })", "({'created':1})", 'line 910', {}, {})
test("tbl.indexWait().pluck('index', 'ready')", "", 'line 912', {}, {})
test("tbl.between(r.minval, [0, 0], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 916', {}, {})
test("tbl.between(r.minval, [0, 0], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 920', {}, {})
test("tbl.between(r.minval, [0, 1], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1]', 'line 924', {}, {})
test("tbl.between(r.minval, [0, 1], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1]', 'line 928', {}, {})
test("tbl.between(r.minval, [1, 0], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2]', 'line 932', {}, {})
test("tbl.between(r.minval, [1, 0], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1]', 'line 936', {}, {})
test("tbl.between(r.minval, [1, 1], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2]', 'line 940', {}, {})
test("tbl.between(r.minval, [1, 1], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2]', 'line 944', {}, {})
test("tbl.between(r.minval, r.maxval, {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 948', {}, {})
test("tbl.between(r.minval, r.maxval, {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 952', {}, {})
test("tbl.between(r.minval, [0, 0], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1]', 'line 957', {}, {})
test("tbl.between(r.minval, [0, 0], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1]', 'line 961', {}, {})
test("tbl.between(r.minval, [0, 1], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2]', 'line 965', {}, {})
test("tbl.between(r.minval, [0, 1], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1]', 'line 969', {}, {})
test("tbl.between(r.minval, [1, 0], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2]', 'line 973', {}, {})
test("tbl.between(r.minval, [1, 0], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2]', 'line 977', {}, {})
test("tbl.between(r.minval, [1, 1], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 981', {}, {})
test("tbl.between(r.minval, [1, 1], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 985', {}, {})
test("tbl.between(r.minval, r.maxval, {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 989', {}, {})
test("tbl.between(r.minval, r.maxval, {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 993', {}, {})
test("tbl.between([0, 0], [0, 0], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 998', {}, {})
test("tbl.between([0, 0], [0, 0], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1002', {}, {})
test("tbl.between([0, 0], [0, 1], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1]', 'line 1006', {}, {})
test("tbl.between([0, 0], [0, 1], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1]', 'line 1010', {}, {})
test("tbl.between([0, 0], [1, 0], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2]', 'line 1014', {}, {})
test("tbl.between([0, 0], [1, 0], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1]', 'line 1018', {}, {})
test("tbl.between([0, 0], [1, 1], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2]', 'line 1022', {}, {})
test("tbl.between([0, 0], [1, 1], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2]', 'line 1026', {}, {})
test("tbl.between([0, 0], r.maxval, {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 1030', {}, {})
test("tbl.between([0, 0], r.maxval, {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 1034', {}, {})
test("tbl.between([0, 0], [0, 0], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1]', 'line 1039', {}, {})
test("tbl.between([0, 0], [0, 0], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1]', 'line 1043', {}, {})
test("tbl.between([0, 0], [0, 2], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2]', 'line 1047', {}, {})
test("tbl.between([0, 0], [0, 1], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1]', 'line 1051', {}, {})
test("tbl.between([0, 0], [1, 0], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2]', 'line 1055', {}, {})
test("tbl.between([0, 0], [1, 0], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2]', 'line 1059', {}, {})
test("tbl.between([0, 0], [1, 1], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 1063', {}, {})
test("tbl.between([0, 0], [1, 1], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3]', 'line 1067', {}, {})
test("tbl.between([0, 0], r.maxval, {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 1071', {}, {})
test("tbl.between([0, 0], r.maxval, {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0, 1, 2, 3, 4]', 'line 1075', {}, {})
test("tbl.between([0, 1], [0, 0], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1080', {}, {})
test("tbl.between([0, 1], [0, 0], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1084', {}, {})
test("tbl.between([0, 1], [0, 1], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1088', {}, {})
test("tbl.between([0, 1], [0, 1], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1092', {}, {})
test("tbl.between([0, 1], [1, 0], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[2]', 'line 1096', {}, {})
test("tbl.between([0, 1], [1, 0], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1100', {}, {})
test("tbl.between([0, 1], [1, 1], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[2]', 'line 1104', {}, {})
test("tbl.between([0, 1], [1, 1], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[2]', 'line 1108', {}, {})
test("tbl.between([0, 1], r.maxval, {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[2, 3, 4]', 'line 1112', {}, {})
test("tbl.between([0, 1], r.maxval, {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[2, 3, 4]', 'line 1116', {}, {})
test("tbl.between([0, 1], [0, 0], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1121', {}, {})
test("tbl.between([0, 1], [0, 0], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1125', {}, {})
test("tbl.between([0, 1], [0, 1], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[2]', 'line 1129', {}, {})
test("tbl.between([0, 1], [0, 1], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1133', {}, {})
test("tbl.between([0, 1], [1, 0], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[2]', 'line 1137', {}, {})
test("tbl.between([0, 1], [1, 0], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[2]', 'line 1141', {}, {})
test("tbl.between([0, 1], [1, 1], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[2, 3]', 'line 1145', {}, {})
test("tbl.between([0, 1], [1, 1], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[2, 3]', 'line 1149', {}, {})
test("tbl.between([0, 1], r.maxval, {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[2, 3, 4]', 'line 1153', {}, {})
test("tbl.between([0, 1], r.maxval, {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[2, 3, 4]', 'line 1157', {}, {})
test("tbl.between([1, 0], [0, 0], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1162', {}, {})
test("tbl.between([1, 0], [0, 0], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1166', {}, {})
test("tbl.between([1, 0], [0, 1], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1170', {}, {})
test("tbl.between([1, 0], [0, 1], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1174', {}, {})
test("tbl.between([1, 0], [1, 0], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1178', {}, {})
test("tbl.between([1, 0], [1, 0], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1182', {}, {})
test("tbl.between([1, 0], [1, 1], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1186', {}, {})
test("tbl.between([1, 0], [1, 1], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[2]', 'line 1190', {}, {})
test("tbl.between([1, 0], r.maxval, {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[3, 4]', 'line 1194', {}, {})
test("tbl.between([1, 0], r.maxval, {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[2, 3, 4]', 'line 1198', {}, {})
test("tbl.between([1, 0], [0, 0], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1203', {}, {})
test("tbl.between([1, 0], [0, 0], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1207', {}, {})
test("tbl.between([1, 0], [0, 1], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1211', {}, {})
test("tbl.between([1, 0], [0, 1], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1215', {}, {})
test("tbl.between([1, 0], [1, 0], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1219', {}, {})
test("tbl.between([1, 0], [1, 0], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[2]', 'line 1223', {}, {})
test("tbl.between([1, 0], [1, 1], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[3]', 'line 1227', {}, {})
test("tbl.between([1, 0], [1, 1], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[2, 3]', 'line 1231', {}, {})
test("tbl.between([1, 0], r.maxval, {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[3, 4]', 'line 1235', {}, {})
test("tbl.between([1, 0], r.maxval, {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[2, 3, 4]', 'line 1239', {}, {})
test("tbl.between([1, 1], [0, 0], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1244', {}, {})
test("tbl.between([1, 1], [0, 0], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1248', {}, {})
test("tbl.between([1, 1], [0, 1], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1252', {}, {})
test("tbl.between([1, 1], [0, 1], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1256', {}, {})
test("tbl.between([1, 1], [1, 0], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1260', {}, {})
test("tbl.between([1, 1], [1, 0], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1264', {}, {})
test("tbl.between([1, 1], [1, 1], {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1268', {}, {})
test("tbl.between([1, 1], [1, 1], {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1272', {}, {})
test("tbl.between([1, 1], r.maxval, {index:'bc'}).orderBy('id').map(function(x) { return x('id'); })", '[3, 4]', 'line 1276', {}, {})
test("tbl.between([1, 1], r.maxval, {index:'cb'}).orderBy('id').map(function(x) { return x('id'); })", '[3, 4]', 'line 1280', {}, {})
test("tbl.between([1, 1], [0, 0], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1285', {}, {})
test("tbl.between([1, 1], [0, 0], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1289', {}, {})
test("tbl.between([1, 1], [0, 1], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1293', {}, {})
test("tbl.between([1, 1], [0, 1], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1297', {}, {})
test("tbl.between([1, 1], [1, 0], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1301', {}, {})
test("tbl.between([1, 1], [1, 0], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[]', 'line 1305', {}, {})
test("tbl.between([1, 1], [1, 1], {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[3]', 'line 1309', {}, {})
test("tbl.between([1, 1], [1, 1], {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[3]', 'line 1313', {}, {})
test("tbl.between([1, 1], r.maxval, {'index':'bc', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[3, 4]', 'line 1317', {}, {})
test("tbl.between([1, 1], r.maxval, {'index':'cb', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[3, 4]', 'line 1321', {}, {})
test("tbl.between(1, 3, {'index':'mi', 'right_bound':'closed'}).map(function(x) { return x('id'); })", '[0,0,0]', 'line 1326', {}, {})
test("tbl.between(1, 16, {'index':'mi', 'right_bound':'closed'}).orderBy('id').map(function(x) { return x('id'); })", '[0,0,0,1,1,1,2,3,3,3,4,4,4]', 'line 1331', {}, {})
test("tbl.orderBy({'index':'mi'}).map(function(x) { return x('id'); })", '[0,0,0,1,1,1,2,3,3,3,4,4,4]', 'line 1336', {}, {})
test("tbl.between(0, 1, {index:'c', rightBound:'closed', leftBound:'open'}).orderBy('id')('id')", '[2, 3]', 'line 1342', {}, {})
test("tbl.between(0, 1, {index:'id', rightBound:'closed', leftBound:'open'}).orderBy('id')('id')", '[1]', 'line 1346', {}, {})


the_end()
