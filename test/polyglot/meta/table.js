#!/usr/local/bin/node
// -*- coding: utf-8 -*-

'use strict';
const common = require('../common'),
      setup_table = common.setup_table,
      setup_table_check = common.setup_table_check,
      test = common.test,
      define = common.define,
      the_end = common.the_end;

setup_table_check()

define("r.db('test')", 'db')
test('db.tableList()', '[]', 'line 6', {}, {})
test("r.db('rethinkdb').info()", "({'type':'DB','name':'rethinkdb','id':null})", 'line 9', {}, {})
test("r.db('rethinkdb').table('stats').info()", "partial({'db':{'type':'DB','name':'rethinkdb','id':null},\n'type':'TABLE','id':null,'name':'stats',\n'indexes':[],'primary_key':'id'})", 'line 12', {}, {})
test("db.tableCreate('a')", "partial({'tables_created':1})", 'line 18', {}, {})
test('db.tableList()', "['a']", 'line 21', {}, {})
test("db.tableCreate('b')", "partial({'tables_created':1})", 'line 24', {}, {})
test('db.tableList()', "bag(['a', 'b'])", 'line 27', {}, {})
test("db.tableDrop('a')", "partial({'tables_dropped':1})", 'line 31', {}, {})
test('db.tableList()', "['b']", 'line 34', {}, {})
test("db.tableDrop('b')", "partial({'tables_dropped':1})", 'line 37', {}, {})
test('db.tableList()', '[]', 'line 40', {}, {})
test("db.tableCreate('ab', {durability:'soft'})", "partial({'tables_created':1,'config_changes':[partial({'new_val':partial({'durability':'soft'})})]})", 'line 45', {}, {})
test("db.tableDrop('ab')", "partial({'tables_dropped':1})", 'line 49', {}, {})
test("db.tableCreate('ab', {durability:'hard'})", "partial({'tables_created':1,'config_changes':[partial({'new_val':partial({'durability':'hard'})})]})", 'line 53', {}, {})
test("db.tableDrop('ab')", "partial({'tables_dropped':1})", 'line 57', {}, {})
test("db.tableCreate('ab', {durability:'fake'})", 'err(\'ReqlQueryLogicError\', \'Durability option `fake` unrecognized (options are "hard" and "soft").\')', 'line 61', {}, {})
test("db.tableCreate('ab', {primaryKey:'bar', shards:2, replicas:1})", "partial({'tables_created':1})", 'line 66', {}, {})
test("db.tableDrop('ab')", "partial({'tables_dropped':1})", 'line 70', {}, {})
test("db.tableCreate('ab', {primaryKey:'bar', primaryReplicaTag:'default'})", "partial({'tables_created':1})", 'line 74', {}, {})
test("db.tableDrop('ab')", "partial({'tables_dropped':1})", 'line 78', {}, {})
test("db.tableCreate('ab', {nonvotingReplicaTags:['default']})", "partial({'tables_created':1})", 'line 82', {}, {})
test("db.tableDrop('ab')", "partial({'tables_dropped':1})", 'line 86', {}, {})
test("db.tableCreate('a')", "partial({'tables_created':1})", 'line 90', {}, {})
test("db.table('a').reconfigure({shards:1, replicas:1})", "partial({'reconfigured':1})", 'line 94', {}, {})
test("db.table('a').reconfigure({shards:1, replicas:{default:1}, nonvotingReplicaTags:['default'], primaryReplicaTag:'default'})", "partial({'reconfigured':1})", 'line 99', {}, {})
test("db.table('a').reconfigure({shards:1, replicas:1, dryRun:true})", "partial({'reconfigured':0})", 'line 104', {}, {})
test('db.table(\'a\').reconfigure({emergencyRepair:"unsafe_rollback"})', "err('ReqlOpFailedError', 'This table doesn\\'t need to be repaired.', [])", 'line 109', {}, {})
test('db.table(\'a\').reconfigure({emergencyRepair:"unsafe_rollback", dryRun:true})', "err('ReqlOpFailedError', 'This table doesn\\'t need to be repaired.', [])", 'line 114', {}, {})
test('db.table(\'a\').reconfigure({emergencyRepair:"unsafe_rollback_or_erase"})', "err('ReqlOpFailedError', 'This table doesn\\'t need to be repaired.', [])", 'line 119', {}, {})
test("db.table('a').reconfigure({emergencyRepair:null, shards:1, replicas:1, dryRun:true})", "partial({'reconfigured':0})", 'line 124', {}, {})
test("db.tableDrop('a')", "partial({'tables_dropped':1})", 'line 128', {}, {})
test("db.tableCreate('foo')", "partial({'tables_created':1})", 'line 132', {}, {})
test("db.tableCreate('foo')", "err('ReqlOpFailedError', 'Table `test.foo` already exists.', [0])", 'line 135', {}, {})
test("db.tableDrop('foo')", "partial({'tables_dropped':1})", 'line 138', {}, {})
test("db.tableDrop('foo')", "err('ReqlOpFailedError', 'Table `test.foo` does not exist.', [0])", 'line 141', {}, {})
test("db.tableCreate('nonsense', 'foo')", "err('ReqlCompileError', 'Expected 1 argument (not including options) but found 2.', [])", 'line 144', {}, {})
test("db.tableCreate('nonsense', {'foo':'bar'})", 'err(\'ReqlCompileError\', "Unrecognized optional argument `foo`.", [])', 'line 150', {}, {})
test("db.tableCreate('a')", "partial({'tables_created':1})", 'line 158', {}, {})
test("db.table('a').reconfigure({shards:0, replicas:1})", "err('ReqlQueryLogicError', 'Every table must have at least one shard.', [])", 'line 162', {}, {})
test('db.table(\'a\').reconfigure({shards:1, replicas:{default:1}, primaryReplicaTag:"foo"})', "err('ReqlOpFailedError', 'Can\\'t use server tag `foo` for primary replicas because you specified no replicas in server tag `foo`.', [])", 'line 167', {}, {})
test('db.table(\'a\').reconfigure({shards:1, replicas:{"default":1}, primaryReplicaTag:"default", nonvotingReplicaTags:["foo"]})', "err('ReqlOpFailedError', 'You specified that the replicas in server tag `foo` should be non-voting, but you didn\\'t specify a number of replicas in server tag `foo`.', [])", 'line 172', {}, {})
test('db.table(\'a\').reconfigure({shards:1, replicas:{foo:0}, primaryReplicaTag:"foo"})', "err('ReqlOpFailedError', 'You must set `replicas` to at least one. `replicas` includes the primary replica; if there are zero replicas, there is nowhere to put the data.', [])", 'line 177', {}, {})
test("db.table('a').reconfigure({shards:1, replicas:{default:0}})", "err('ReqlQueryLogicError', '`primary_replica_tag` must be specified when `replicas` is an OBJECT.', [])", 'line 182', {}, {})
test("db.table('a').reconfigure({shards:1, replicas:{default:-3}, primaryReplicaTag:'default'})", "err('ReqlQueryLogicError', 'Can\\'t have a negative number of replicas', [])", 'line 187', {}, {})
test("db.table('a').reconfigure({shards:1, replicas:3, primaryReplicaTag:'foo'})", "err('ReqlQueryLogicError', '`replicas` must be an OBJECT if `primary_replica_tag` is specified.', [])", 'line 192', {}, {})
test("db.table('a').reconfigure({shards:1, replicas:3, nonvotingReplicaTags:['foo']})", "err('ReqlQueryLogicError', '`replicas` must be an OBJECT if `nonvoting_replica_tags` is specified.', [])", 'line 197', {}, {})
test('db.reconfigure({emergencyRepair:"unsafe_rollback"})', "err('ReqlQueryLogicError', 'Can\\'t emergency repair an entire database at once; instead you should run `reconfigure()` on each table individually.')", 'line 202', {}, {})
test('db.table(\'a\').reconfigure({emergencyRepair:"foo"})', 'err(\'ReqlQueryLogicError\', \'`emergency_repair` should be "unsafe_rollback" or "unsafe_rollback_or_erase"\', [])', 'line 207', {}, {})
test('db.table(\'a\').reconfigure({emergencyRepair:"unsafe_rollback", shards:1, replicas:1})', "err('ReqlQueryLogicError', 'In emergency repair mode, you can\\'t specify shards, replicas, etc.')", 'line 212', {}, {})
test("db.table('a').reconfigure({shards:2, replicas:1})", "partial({'reconfigured':1})", 'line 218', {}, {})
test('db.table(\'a\').wait({"waitFor":"all_replicas_ready"})', '({"ready":1})', 'line 223', {}, {})
test("db.table('a').insert([{id:1}, {id:2}, {id:3}, {id:4}])", 'partial({"inserted":4})', 'line 229', {}, {})
test("db.table('a').reconfigure({shards:2, replicas:1})", "partial({'reconfigured':1})", 'line 234', {}, {})
test("db.table('a').reconfigure({shards:1, replicas:2})", "err('ReqlOpFailedError', 'Can\\'t put 2 replicas on servers with the tag `default` because there are only 1 servers with the tag `default`. It\\'s impossible to have more replicas of the data than there are servers.', [])", 'line 239', {}, {})
test('db.table(\'a\').wait({"waitFor":"all_replicas_ready"})', '({"ready":1})', 'line 245', {}, {})
test("db.table('a').rebalance()", "partial({'rebalanced':1})", 'line 248', {}, {})
test('db.wait({"waitFor":"all_replicas_ready"})', '({"ready":1})', 'line 252', {}, {})
test('db.rebalance()', "partial({'rebalanced':1})", 'line 255', {}, {})
test('r.wait()', "err('TypeError')", 'line 258', {}, {})
test('r.rebalance()', "err('TypeError')", 'line 264', {}, {})
test("db.tableDrop('a')", "partial({'tables_dropped':1})", 'line 271', {}, {})
test("db.tableCreate('a')", "", 'line 275', {}, {})
test("db.tableCreate('b')", "", 'line 276', {}, {})
test("db.tableCreate('c')", "", 'line 277', {}, {})
test('db.reconfigure({shards:0, replicas:1})', "err('ReqlQueryLogicError', 'Every table must have at least one shard.', [])", 'line 280', {}, {})
test('db.reconfigure({shards:1, replicas:{default:0}})', "err('ReqlQueryLogicError', '`primary_replica_tag` must be specified when `replicas` is an OBJECT.', [])", 'line 285', {}, {})
test("db.reconfigure({shards:1, replicas:{default:-3}, primaryReplicaTag:'default'})", "err('ReqlQueryLogicError', 'Can\\'t have a negative number of replicas', [])", 'line 290', {}, {})
test("db.reconfigure({shards:1, replicas:3, primaryReplicaTag:'foo'})", "err('ReqlQueryLogicError', '`replicas` must be an OBJECT if `primary_replica_tag` is specified.', [])", 'line 295', {}, {})
test('db.reconfigure({shards:2, replicas:1})', "partial({'reconfigured':3})", 'line 300', {}, {})
test("db.tableDrop('a')", "partial({'tables_dropped':1})", 'line 304', {}, {})
test("db.tableDrop('b')", "partial({'tables_dropped':1})", 'line 306', {}, {})
test("db.tableDrop('c')", "partial({'tables_dropped':1})", 'line 308', {}, {})
test('r.dbCreate("test2")', "partial({'dbs_created':1})", 'line 312', {}, {})
define('r.db("test2")', 'db2')
test('db.tableCreate("testA")', "partial({'tables_created':1})", 'line 317', {}, {})
test('db.tableCreate("testB")', "partial({'tables_created':1})", 'line 319', {}, {})
test('db2.tableCreate("test2B")', "partial({'tables_created':1})", 'line 321', {}, {})
test("r.table('testA').config().pluck('db','name')", "({'db':'test','name':'testA'})", 'line 324', {}, {})
test("r.table('doesntexist').config()", "err('ReqlOpFailedError', 'Table `test.doesntexist` does not exist.', [])", 'line 327', {}, {})
test("r.table('test2B').config()", "err('ReqlOpFailedError', 'Table `test.test2B` does not exist.', [])", 'line 330', {}, {})
test("r.db('rethinkdb').table('table_config').filter({'name':'testA'}).nth(0).eq(r.table('testA').config())", 'true', 'line 333', {}, {})
test("r.db('rethinkdb').table('table_status').filter({'name':'testA'}).nth(0).eq(r.table('testA').status())", 'true', 'line 336', {}, {})
test('r.db(\'rethinkdb\').table(\'table_config\', {identifierFormat:\'uuid\'}).nth(0)("db")', 'uuid()', 'line 340', {}, {})
test("r.table('testA', {identifierFormat:'uuid'}).count()", '0', 'line 345', {}, {})
test("r.wait({waitFor:'all_replicas_ready', timeout:5})", "err('TypeError')", 'line 350', {}, {})
test("db.tableDrop('testA')", "partial({'tables_dropped':1})", 'line 358', {}, {})
test("db.tableDrop('testB')", "partial({'tables_dropped':1})", 'line 361', {}, {})
test("r.dbDrop('test2')", "partial({'dbs_dropped':1,'tables_dropped':1})", 'line 364', {}, {})


the_end()
