#!/usr/local/bin/node
// -*- coding: utf-8 -*-

'use strict';
const common = require('../common'),
      setup_table = common.setup_table,
      setup_table_check = common.setup_table_check,
      test = common.test,
      define = common.define,
      the_end = common.the_end;

setup_table_check()

define("'\u3053\u3093\u306b\u3061\u306f'", 'japaneseHello')
test("r('str')", '"str"', 'line 14', {}, {})
test("r.expr('str')", '"str"', 'line 15', {}, {})
test('r("str")', '"str"', 'line 19', {}, {})
test('r.expr("str")', '"str"', 'line 20', {}, {})
test('r.expr(japaneseHello)', "'\u3053\u3093\u306b\u3061\u306f'", 'line 35', {}, {})
test("r.expr('foo').typeOf()", "'STRING'", 'line 43', {}, {})
test("r.expr('foo').coerceTo('string')", "'foo'", 'line 47', {}, {})
test("r.expr('-1.2').coerceTo('NUMBER')", '-1.2', 'line 49', {}, {})
test("r.expr('--1.2').coerceTo('NUMBER')", 'err("ReqlQueryLogicError", "Could not coerce `--1.2` to NUMBER.", [])', 'line 51', {}, {})
test("r.expr('-1.2-').coerceTo('NUMBER')", 'err("ReqlQueryLogicError", "Could not coerce `-1.2-` to NUMBER.", [])', 'line 53', {}, {})
test("r.expr('0xa').coerceTo('NUMBER')", '10', 'line 55', {}, {})
test("r.expr('inf').coerceTo('NUMBER')", 'err("ReqlQueryLogicError", "Non-finite number: inf", [])', 'line 57', {}, {})
test("r.expr('hello, world!').count()", '13', 'line 61', {}, {})
test('r.expr(japaneseHello).count()', '5', 'line 63', {}, {})
test("r.expr('hello').slice(1)", "'ello'", 'line 67', {}, {})
test("r.expr('hello').slice(-1)", "'o'", 'line 69', {}, {})
test("r.expr('hello').slice(-4,3)", "'el'", 'line 71', {}, {})
test("r.expr('hello').slice(-99)", "'hello'", 'line 73', {}, {})
test("r.expr('hello').slice(0)", "'hello'", 'line 75', {}, {})
test('r.expr(japaneseHello).slice(1)', "'\u3093\u306b\u3061\u306f'", 'line 77', {}, {})
test('r.expr(japaneseHello).slice(1,2)', "'\u3093'", 'line 84', {}, {})
test('r.expr(japaneseHello).slice(-3)', "'\u306b\u3061\u306f'", 'line 91', {}, {})
test("r.expr('').split()", '[]', 'line 100', {}, {})
test("r.expr('').split(null)", '[]', 'line 102', {}, {})
test("r.expr('').split(' ')", "['']", 'line 104', {}, {})
test("r.expr('').split('')", '[]', 'line 106', {}, {})
test("r.expr('').split(null, 5)", '[]', 'line 108', {}, {})
test("r.expr('').split(' ', 5)", "['']", 'line 110', {}, {})
test("r.expr('').split('', 5)", '[]', 'line 112', {}, {})
test("r.expr('aaaa bbbb  cccc ').split()", "['aaaa', 'bbbb', 'cccc']", 'line 115', {}, {})
test("r.expr('aaaa bbbb  cccc ').split(null)", "['aaaa', 'bbbb', 'cccc']", 'line 117', {}, {})
test("r.expr('aaaa bbbb  cccc ').split(' ')", "['aaaa', 'bbbb', '', 'cccc', '']", 'line 119', {}, {})
test("r.expr('aaaa bbbb  cccc ').split('')", "['a', 'a', 'a', 'a', ' ', 'b', 'b', 'b', 'b', ' ', ' ', 'c', 'c', 'c', 'c', ' ']", 'line 121', {}, {})
test("r.expr('aaaa bbbb  cccc ').split('b')", "['aaaa ', '', '', '', '  cccc ']", 'line 123', {}, {})
test("r.expr('aaaa bbbb  cccc ').split('bb')", "['aaaa ', '', '  cccc ']", 'line 125', {}, {})
test("r.expr('aaaa bbbb  cccc ').split(' bbbb  ')", "['aaaa', 'cccc ']", 'line 127', {}, {})
test("r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb')", "['aaaa ', '', '  cccc b d ', ' e ', '', ' f']", 'line 129', {}, {})
test("r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ')", "['aaaa', 'cccc b d bb e bbbb f']", 'line 131', {}, {})
test("r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ')", "['aaaa', 'cccc b d bb e', 'f']", 'line 133', {}, {})
test("r.expr('aaaa bbbb  cccc ').split(null, 3)", "['aaaa', 'bbbb', 'cccc']", 'line 136', {}, {})
test("r.expr('aaaa bbbb  cccc ').split(' ', 5)", "['aaaa', 'bbbb', '', 'cccc', '']", 'line 138', {}, {})
test("r.expr('aaaa bbbb  cccc ').split('', 5)", "['a', 'a', 'a', 'a', ' ', 'bbbb  cccc ']", 'line 140', {}, {})
test("r.expr('aaaa bbbb  cccc ').split('b', 5)", "['aaaa ', '', '', '', '  cccc ']", 'line 142', {}, {})
test("r.expr('aaaa bbbb  cccc ').split('bb', 3)", "['aaaa ', '', '  cccc ']", 'line 144', {}, {})
test("r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 2)", "['aaaa', 'cccc ']", 'line 146', {}, {})
test("r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 6)", "['aaaa ', '', '  cccc b d ', ' e ', '', ' f']", 'line 148', {}, {})
test("r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2)", "['aaaa', 'cccc b d bb e bbbb f']", 'line 150', {}, {})
test("r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 3)", "['aaaa', 'cccc b d bb e', 'f']", 'line 152', {}, {})
test("r.expr('aaaa bbbb  cccc ').split(null, 2)", "['aaaa', 'bbbb', 'cccc ']", 'line 155', {}, {})
test('r.expr("a  b  ").split(null, 2)', '["a", "b"]', 'line 157', {}, {})
test("r.expr('aaaa bbbb  cccc ').split(' ', 4)", "['aaaa', 'bbbb', '', 'cccc', '']", 'line 159', {}, {})
test("r.expr('aaaa bbbb  cccc ').split('', 4)", "['a', 'a', 'a', 'a', ' bbbb  cccc ']", 'line 161', {}, {})
test("r.expr('aaaa bbbb  cccc ').split('b', 4)", "['aaaa ', '', '', '', '  cccc ']", 'line 163', {}, {})
test("r.expr('aaaa bbbb  cccc ').split('bb', 2)", "['aaaa ', '', '  cccc ']", 'line 165', {}, {})
test("r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 1)", "['aaaa', 'cccc ']", 'line 167', {}, {})
test("r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 5)", "['aaaa ', '', '  cccc b d ', ' e ', '', ' f']", 'line 169', {}, {})
test("r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 1)", "['aaaa', 'cccc b d bb e bbbb f']", 'line 171', {}, {})
test("r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2)", "['aaaa', 'cccc b d bb e', 'f']", 'line 173', {}, {})
test("r.expr('aaaa bbbb  cccc ').split(null, 1)", "['aaaa', 'bbbb  cccc ']", 'line 176', {}, {})
test("r.expr('aaaa bbbb  cccc ').split(' ', 2)", "['aaaa', 'bbbb', ' cccc ']", 'line 178', {}, {})
test("r.expr('aaaa bbbb  cccc ').split('', 2)", "['a', 'a', 'aa bbbb  cccc ']", 'line 180', {}, {})
test("r.expr('aaaa bbbb  cccc ').split('b', 2)", "['aaaa ', '', 'bb  cccc ']", 'line 182', {}, {})
test("r.expr('aaaa bbbb  cccc ').split('bb', 2)", "['aaaa ', '', '  cccc ']", 'line 184', {}, {})
test("r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 2)", "['aaaa', 'cccc ']", 'line 186', {}, {})
test("r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 2)", "['aaaa ', '', '  cccc b d bb e bbbb f']", 'line 188', {}, {})
test("r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2)", "['aaaa', 'cccc b d bb e bbbb f']", 'line 190', {}, {})
test("r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2)", "['aaaa', 'cccc b d bb e', 'f']", 'line 192', {}, {})
test("r.expr('  ').split()", '[]', 'line 195', {}, {})
test("r.expr('  ').split(null)", '[]', 'line 197', {}, {})
test("r.expr('  ').split(' ')", "['', '', '']", 'line 199', {}, {})
test("r.expr('  ').split(null, 5)", '[]', 'line 201', {}, {})
test("r.expr('  ').split(' ', 5)", "['', '', '']", 'line 203', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split()", "['aaaa', 'bbbb', 'cccc']", 'line 206', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split(null)", "['aaaa', 'bbbb', 'cccc']", 'line 208', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split(' ')", "['', '', 'aaaa', 'bbbb', '', 'cccc', '']", 'line 210', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split('b')", "['  aaaa ', '', '', '', '  cccc ']", 'line 212', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split('bb')", "['  aaaa ', '', '  cccc ']", 'line 214', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split(' bbbb  ')", "['  aaaa', 'cccc ']", 'line 216', {}, {})
test("r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb')", "['  aaaa ', '', '  cccc b d ', ' e ', '', ' f']", 'line 218', {}, {})
test("r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ')", "['  aaaa', 'cccc b d bb e bbbb f']", 'line 220', {}, {})
test("r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ')", "['  aaaa', 'cccc b d bb e', 'f']", 'line 222', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split(null, 3)", "['aaaa', 'bbbb', 'cccc']", 'line 225', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split(' ', 5)", "['', '', 'aaaa', 'bbbb', '', 'cccc ']", 'line 227', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split('b', 5)", "['  aaaa ', '', '', '', '  cccc ']", 'line 229', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split('bb', 3)", "['  aaaa ', '', '  cccc ']", 'line 231', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 2)", "['  aaaa', 'cccc ']", 'line 233', {}, {})
test("r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 6)", "['  aaaa ', '', '  cccc b d ', ' e ', '', ' f']", 'line 235', {}, {})
test("r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2)", "['  aaaa', 'cccc b d bb e bbbb f']", 'line 237', {}, {})
test("r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 3)", "['  aaaa', 'cccc b d bb e', 'f']", 'line 239', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split(null, 2)", "['aaaa', 'bbbb', 'cccc ']", 'line 242', {}, {})
test('r.expr("a  b  ").split(null, 2)', '["a", "b"]', 'line 244', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split(' ', 4)", "['', '', 'aaaa', 'bbbb', ' cccc ']", 'line 246', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split('b', 4)", "['  aaaa ', '', '', '', '  cccc ']", 'line 248', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split('bb', 2)", "['  aaaa ', '', '  cccc ']", 'line 250', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 1)", "['  aaaa', 'cccc ']", 'line 252', {}, {})
test("r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 5)", "['  aaaa ', '', '  cccc b d ', ' e ', '', ' f']", 'line 254', {}, {})
test("r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 1)", "['  aaaa', 'cccc b d bb e bbbb f']", 'line 256', {}, {})
test("r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2)", "['  aaaa', 'cccc b d bb e', 'f']", 'line 258', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split(null, 1)", "['aaaa', 'bbbb  cccc ']", 'line 261', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split(' ', 2)", "['', '', 'aaaa bbbb  cccc ']", 'line 263', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split('b', 2)", "['  aaaa ', '', 'bb  cccc ']", 'line 265', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split('bb', 2)", "['  aaaa ', '', '  cccc ']", 'line 267', {}, {})
test("r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 2)", "['  aaaa', 'cccc ']", 'line 269', {}, {})
test("r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 2)", "['  aaaa ', '', '  cccc b d bb e bbbb f']", 'line 271', {}, {})
test("r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2)", "['  aaaa', 'cccc b d bb e bbbb f']", 'line 273', {}, {})
test("r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2)", "['  aaaa', 'cccc b d bb e', 'f']", 'line 275', {}, {})
test('r.expr("abc-dEf-GHJ").upcase()', '"ABC-DEF-GHJ"', 'line 278', {}, {})
test('r.expr("abc-dEf-GHJ").downcase()', '"abc-def-ghj"', 'line 280', {}, {})
test('r.expr("f\\u00e9oo").split("")', '["f", "\\u00e9", "o", "o"]', 'line 290', {}, {})
test('r.expr("fe\\u0301oo").split("")', '["f", "e\\u0301", "o", "o"]', 'line 299', {}, {})
test('r.expr("foo bar\\tbaz\\nquux\\rfred\\u000bbarney\\u000cwilma").split()', '["foo", "bar", "baz", "quux", "fred", "barney", "wilma"]', 'line 305', {}, {})
test('r.expr("foo\\u00a0bar\\u2001baz\\u2060quux\\u2028fred\\u2028barney\\u2029wilma\\u0085betty\\u200b").split()', '["foo", "bar", "baz\\u2060quux", "fred", "barney", "wilma", "betty\\u200b"]', 'line 328', {}, {})


the_end()
