#!/usr/local/bin/node
// -*- coding: utf-8 -*-

'use strict';
const common = require('../common'),
      setup_table = common.setup_table,
      setup_table_check = common.setup_table_check,
      test = common.test,
      define = common.define,
      the_end = common.the_end;

setup_table_check()

define('Buffer("", \'binary\')', 's')
test('r.binary(s)', 's', 'line 10', {}, {})
test('r.binary(s).count()', '0', 'line 12', {}, {})
define('Buffer("\\x00", \'binary\')', 's')
test('r.binary(s)', 's', 'line 19', {}, {})
test('r.binary(s).count()', '1', 'line 21', {}, {})
define('Buffer("\\x00\\x42", \'binary\')', 's')
test('r.binary(s)', 's', 'line 28', {}, {})
test('r.binary(s).count()', '2', 'line 30', {}, {})
define('Buffer("\\x00\\xfe\\x7a", \'binary\')', 's')
test('r.binary(s)', 's', 'line 37', {}, {})
test('r.binary(s).count()', '3', 'line 39', {}, {})
define('Buffer("\\xed\\xfe\\x00\\xba", \'binary\')', 's')
test('r.binary(s)', 's', 'line 46', {}, {})
test('r.binary(s).count()', '4', 'line 48', {}, {})
define('Buffer("\\x50\\xf9\\x00\\x77\\xf9", \'binary\')', 's')
test('r.binary(s)', 's', 'line 55', {}, {})
test('r.binary(s).count()', '5', 'line 57', {}, {})
define('Buffer("\\x2f\\xe3\\xb5\\x57\\x00\\x92", \'binary\')', 's')
test('r.binary(s)', 's', 'line 64', {}, {})
test('r.binary(s).count()', '6', 'line 66', {}, {})
define('Buffer("\\xa9\\x43\\x54\\xe9\\x00\\xf8\\xfb", \'binary\')', 's')
test('r.binary(s)', 's', 'line 73', {}, {})
test('r.binary(s).count()', '7', 'line 75', {}, {})
define('Buffer("\\x57\\xbb\\xe5\\x82\\x8b\\xd3\\x00\\xf9", \'binary\')', 's')
test('r.binary(s)', 's', 'line 82', {}, {})
test('r.binary(s).count()', '8', 'line 84', {}, {})
define('Buffer("\\x44\\x1b\\x3e\\x00\\x13\\x19\\x29\\x2a\\xbf", \'binary\')', 's')
test('r.binary(s)', 's', 'line 91', {}, {})
test('r.binary(s).count()', '9', 'line 93', {}, {})
define('Buffer("\\x8a\\x1d\\x09\\x00\\x5d\\x60\\x6b\\x2e\\x70\\xd9", \'binary\')', 's')
test('r.binary(s)', 's', 'line 100', {}, {})
test('r.binary(s).count()', '10', 'line 102', {}, {})
define('Buffer("\\x00\\xaf\\x47\\x4b\\x38\\x99\\x14\\x8d\\x8f\\x10\\x51", \'binary\')', 's')
test('r.binary(s)', 's', 'line 109', {}, {})
test('r.binary(s).count()', '11', 'line 111', {}, {})
define('Buffer("\\x45\\x39\\x00\\xf7\\xc2\\x37\\xfd\\xe0\\x38\\x82\\x40\\xa9", \'binary\')', 's')
test('r.binary(s)', 's', 'line 118', {}, {})
test('r.binary(s).count()', '12', 'line 120', {}, {})
define('Buffer("\\x00", \'binary\')', 'a')
define('Buffer("\\x00\\x01", \'binary\')', 'b')
define('Buffer("\\x01", \'binary\')', 'c')
define('Buffer("\\x70\\x22", \'binary\')', 'd')
define('Buffer("\\x80", \'binary\')', 'e')
define('Buffer("\\xFE", \'binary\')', 'f')
test('r.binary(a).eq(r.binary(a))', 'true', 'line 151', {}, {})
test('r.binary(a).le(r.binary(a))', 'true', 'line 153', {}, {})
test('r.binary(a).ge(r.binary(a))', 'true', 'line 155', {}, {})
test('r.binary(a).ne(r.binary(a))', 'false', 'line 157', {}, {})
test('r.binary(a).lt(r.binary(a))', 'false', 'line 159', {}, {})
test('r.binary(a).gt(r.binary(a))', 'false', 'line 161', {}, {})
test('r.binary(a).ne(r.binary(b))', 'true', 'line 165', {}, {})
test('r.binary(a).lt(r.binary(b))', 'true', 'line 167', {}, {})
test('r.binary(a).le(r.binary(b))', 'true', 'line 169', {}, {})
test('r.binary(a).ge(r.binary(b))', 'false', 'line 171', {}, {})
test('r.binary(a).gt(r.binary(b))', 'false', 'line 173', {}, {})
test('r.binary(a).eq(r.binary(b))', 'false', 'line 175', {}, {})
test('r.binary(b).ne(r.binary(c))', 'true', 'line 179', {}, {})
test('r.binary(b).lt(r.binary(c))', 'true', 'line 181', {}, {})
test('r.binary(b).le(r.binary(c))', 'true', 'line 183', {}, {})
test('r.binary(b).ge(r.binary(c))', 'false', 'line 185', {}, {})
test('r.binary(b).gt(r.binary(c))', 'false', 'line 187', {}, {})
test('r.binary(b).eq(r.binary(c))', 'false', 'line 189', {}, {})
test('r.binary(c).ne(r.binary(d))', 'true', 'line 193', {}, {})
test('r.binary(c).lt(r.binary(d))', 'true', 'line 195', {}, {})
test('r.binary(c).le(r.binary(d))', 'true', 'line 197', {}, {})
test('r.binary(c).ge(r.binary(d))', 'false', 'line 199', {}, {})
test('r.binary(c).gt(r.binary(d))', 'false', 'line 201', {}, {})
test('r.binary(c).eq(r.binary(d))', 'false', 'line 203', {}, {})
test('r.binary(d).ne(r.binary(e))', 'true', 'line 207', {}, {})
test('r.binary(d).lt(r.binary(e))', 'true', 'line 209', {}, {})
test('r.binary(d).le(r.binary(e))', 'true', 'line 211', {}, {})
test('r.binary(d).ge(r.binary(e))', 'false', 'line 213', {}, {})
test('r.binary(d).gt(r.binary(e))', 'false', 'line 215', {}, {})
test('r.binary(d).eq(r.binary(e))', 'false', 'line 217', {}, {})
test('r.binary(e).ne(r.binary(f))', 'true', 'line 221', {}, {})
test('r.binary(e).lt(r.binary(f))', 'true', 'line 223', {}, {})
test('r.binary(e).le(r.binary(f))', 'true', 'line 225', {}, {})
test('r.binary(e).ge(r.binary(f))', 'false', 'line 227', {}, {})
test('r.binary(e).gt(r.binary(f))', 'false', 'line 229', {}, {})
test('r.binary(e).eq(r.binary(f))', 'false', 'line 231', {}, {})
test('r.binary(f).eq(r.binary(f))', 'true', 'line 235', {}, {})
test('r.binary(f).le(r.binary(f))', 'true', 'line 237', {}, {})
test('r.binary(f).ge(r.binary(f))', 'true', 'line 239', {}, {})
test('r.binary(f).ne(r.binary(f))', 'false', 'line 241', {}, {})
test('r.binary(f).lt(r.binary(f))', 'false', 'line 243', {}, {})
test('r.binary(f).gt(r.binary(f))', 'false', 'line 245', {}, {})
test("r.binary(a).coerceTo('bool')", 'true', 'line 287', {}, {})
test('r.binary(b)', 'b', 'line 316', {'binary_format': '"native"'}, {})
test('r.binary(b)', "({'$reql_type$':'BINARY','data':'AAE='})", 'line 320', {'binary_format': '"raw"'}, {})
test('r.binary(r.expr("data"))', 'Buffer("data", "binary")', 'line 326', {}, {})
test('r.binary(r.expr({}))', "err('ReqlQueryLogicError', 'Expected type STRING but found OBJECT.', [])", 'line 332', {}, {})
test('r.binary(r.expr([]))', "err('ReqlQueryLogicError', 'Expected type STRING but found ARRAY.', [])", 'line 335', {}, {})
test("r.binary(a).coerceTo('array')", "err('ReqlQueryLogicError','Cannot coerce BINARY to ARRAY.',[])", 'line 356', {}, {})
test("r.binary(a).coerceTo('object')", "err('ReqlQueryLogicError','Cannot coerce BINARY to OBJECT.',[])", 'line 358', {}, {})
test("r.binary(a).coerceTo('number')", "err('ReqlQueryLogicError','Cannot coerce BINARY to NUMBER.',[])", 'line 360', {}, {})
test("r.binary(a).coerceTo('nu'+'ll')", "err('ReqlQueryLogicError','Cannot coerce BINARY to NULL.',[])", 'line 362', {}, {})


the_end()
