#!/usr/local/bin/node
// -*- coding: utf-8 -*-

'use strict';
const common = require('../common'),
      setup_table = common.setup_table,
      setup_table_check = common.setup_table_check,
      test = common.test,
      define = common.define,
      the_end = common.the_end;

setup_table_check()

define('r.expr([1, 2, 3])', 'arr')
define('r.expr([1, 1, 2, 3])', 'dupeArr')
define("r.expr([{'a':1, 'b':'a'}, {'a':2, 'b':'b'}, {'a':3, 'b':'c'}])", 'objArr')
define("r.expr([{'a':1, 'b':{'c':1}}, {'a':2, 'b':{'c':2}}, {'a':3, 'b':{'c':3}}])", 'nestedObjArr')
test('arr.append(4)', '[1,2,3,4]', 'line 12', {}, {})
test("arr.append('a')", "[1,2,3,'a']", 'line 14', {}, {})
test('arr.prepend(0)', '[0,1,2,3]', 'line 19', {}, {})
test("arr.prepend('a')", "['a',1,2,3]", 'line 21', {}, {})
test('arr.difference([1,2,2])', '[3]', 'line 26', {}, {})
test('arr.difference([])', '[1,2,3]', 'line 28', {}, {})
test('arr.difference(["foo", "bar"])', '[1,2,3]', 'line 30', {}, {})
test('dupeArr.setInsert(1)', '[1,2,3]', 'line 34', {}, {})
test('dupeArr.setInsert(4)', '[1,2,3,4]', 'line 36', {}, {})
test('dupeArr.setUnion([3,4,5,5])', '[1,2,3,4,5]', 'line 39', {}, {})
test('dupeArr.setUnion([5,6])', '[1,2,3,5,6]', 'line 41', {}, {})
test('dupeArr.setIntersection([1,1,1,2,2])', '[1,2]', 'line 44', {}, {})
test('dupeArr.setIntersection(["foo"])', '[]', 'line 46', {}, {})
test('dupeArr.setDifference([1,1,1,10])', '[2,3]', 'line 49', {}, {})
test('dupeArr.setDifference([2])', '[1,3]', 'line 51', {}, {})
test('arr.slice(1,3)', '[2, 3]', 'line 62', {}, {})
test("arr.slice(1, 2, {rightBound:'closed'})", '[2, 3]', 'line 63', {}, {})
test('arr.slice(0,2)', '[1,2]', 'line 74', {}, {})
test('arr.slice(1)', '[2,3]', 'line 83', {}, {})
test('arr.slice(-2, -1)', '[2]', 'line 89', {}, {})
test('arr.skip(1)', '[2,3]', 'line 95', {}, {})
test('arr.skip(2)', '[3]', 'line 97', {}, {})
test('arr.skip(12)', '[]', 'line 99', {}, {})
test('arr.limit(2)', '[1,2]', 'line 104', {}, {})
test('arr.limit(0)', '[]', 'line 106', {}, {})
test('arr.limit(12)', '[1,2,3]', 'line 108', {}, {})
test("objArr.pluck('a', 'b')", "[{'a':1, 'b':'a'}, {'a':2, 'b':'b'}, {'a':3, 'b':'c'}]", 'line 113', {}, {})
test("objArr.pluck('a')", "[{'a':1}, {'a':2}, {'a':3}]", 'line 115', {}, {})
test('objArr.pluck()', '[{}, {}, {}]', 'line 117', {}, {})
define("objArr.union(objArr.pluck('a')).union(objArr.pluck('b')).union([{'a':null}])", 'wftst')
test("wftst.withFields('a')", "([{'a':1},{'a':2},{'a':3},{'a':1},{'a':2},{'a':3}])", 'line 122', {}, {})
test("wftst.withFields('b')", "([{'b':'a'},{'b':'b'},{'b':'c'},{'b':'a'},{'b':'b'},{'b':'c'}])", 'line 124', {}, {})
test("wftst.withFields('a', 'b')", "([{'a':1,'b':'a'},{'a':2,'b':'b'},{'a':3,'b':'c'}])", 'line 126', {}, {})
test('wftst.withFields()', '[{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]', 'line 128', {}, {})
define("nestedObjArr.union(objArr.pluck({'b':'missing'})).union(nestedObjArr.pluck({'b':'c'}))", 'wftst2')
test("wftst2.withFields({'b':'c'})", "([{'b':{'c':1}}, {'b':{'c':2}}, {'b':{'c':3}}, {'b':{'c':1}}, {'b':{'c':2}}, {'b':{'c':3}}])", 'line 132', {}, {})
test('wftst.withFields(1)', 'err("ReqlQueryLogicError", "Invalid path argument `1`.", [])', 'line 135', {}, {})
test('r.expr(1).withFields()', 'err("ReqlQueryLogicError", "Cannot perform has_fields on a non-object non-sequence `1`.", [])', 'line 137', {}, {})
test("objArr.without('a', 'b')", '[{}, {}, {}]', 'line 142', {}, {})
test("objArr.without('a')", "[{'b':'a'}, {'b':'b'}, {'b':'c'}]", 'line 144', {}, {})
test('objArr.without()', "[{'a':1, 'b':'a'}, {'a':2, 'b':'b'}, {'a':3, 'b':'c'}]", 'line 146', {}, {})
test('arr.map(function(v) { return v.add(1); })', '[2,3,4]', 'line 152', {}, {})
test('arr.reduce(function(a,b) { return a.add(b); })', '6', 'line 162', {}, {})
test('arr.reduce(function(a,b) { return a.add(b); })', '6', 'line 167', {}, {})
test('arr.union(arr).reduce(function(a,b) { return a.add(b); })', '12', 'line 172', {}, {})
test('arr.union(arr).reduce(function(a,b) { return a.add(b); })', '12', 'line 177', {}, {})
test("objArr.filter(function(row) { return row('b').eq('b'); })", "[{'a':2, 'b':'b'}]", 'line 184', {}, {})
test('arr.concatMap(function(v) { return [1,2]; })', '[1,2,1,2,1,2]', 'line 191', {}, {})
test("arr.concatMap(function(v) { return [{'v':v}, {'v2':v.add(1)}]; })", "[{'v':1}, {'v2':2}, {'v':2}, {'v2':3}, {'v':3}, {'v2':4}]", 'line 195', {}, {})
test("objArr.orderBy('b')", "[{'a':1, 'b':'a'}, {'a':2, 'b':'b'}, {'a':3, 'b':'c'}]", 'line 201', {}, {})
test("objArr.orderBy(r.desc('b'))", "[{'a':3, 'b':'c'}, {'a':2, 'b':'b'}, {'a':1, 'b':'a'}]", 'line 205', {}, {})
test("r.expr([{'-a':1},{'-a':2}]).orderBy('-a')", "[{'-a':1},{'-a':2}]", 'line 208', {}, {})
test('r.expr([1,1,2,2,2,3,4]).distinct()', '[1,2,3,4]', 'line 216', {}, {})
test('objArr.count()', '3', 'line 223', {}, {})
test('arr.union(objArr)', "[1, 2, 3, {'a':1, 'b':'a'}, {'a':2, 'b':'b'}, {'a':3, 'b':'c'}]", 'line 228', {}, {})
test('arr.nth(1)', '2', 'line 236', {}, {})
test('arr.nth(0)', '1', 'line 240', {}, {})
test('r.expr([]).isEmpty()', 'true', 'line 245', {}, {})
test('arr.isEmpty()', 'false', 'line 247', {}, {})
test('arr.contains(2)', 'true', 'line 251', {}, {})
test('arr.contains(2, 3)', 'true', 'line 253', {}, {})
test('arr.contains(4)', 'false', 'line 255', {}, {})
test('arr.contains(2, 4)', 'false', 'line 257', {}, {})
test('arr.contains(2, 2)', 'false', 'line 259', {}, {})
test('arr.union(arr).contains(2, 2)', 'true', 'line 261', {}, {})
test('arr.contains(function(x){return x.eq(2);})', 'true', 'line 266', {}, {})
test('arr.contains(function(x){return x.eq(2);}, function(x){return x.eq(3);})', 'true', 'line 270', {}, {})
test('arr.contains(function(x){return x.eq(4);})', 'false', 'line 274', {}, {})
test('arr.contains(function(x){return x.eq(2);}, function(x){return x.eq(4);})', 'false', 'line 278', {}, {})
test('arr.contains(function(x){return x.eq(2);}, function(x){return x.eq(2);})', 'false', 'line 282', {}, {})
test('arr.union(arr).contains(function(x){return x.eq(2);}, function(x){return x.eq(2);})', 'true', 'line 286', {}, {})
test("r.expr([{'a':1},{'b':2},{'a':3,'c':4}])('a')", '[1, 3]', 'line 291', {}, {})
test("r.expr([{'a':1},'a',{'b':2},{'a':3,'c':4}])('a')", 'err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\\"a\\"`.", [])', 'line 294', {}, {})


the_end()
