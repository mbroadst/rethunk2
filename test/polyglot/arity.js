#!/usr/local/bin/node
// -*- coding: utf-8 -*-

'use strict';
const common = require('./common'),
      setup_table = common.setup_table,
      setup_table_check = common.setup_table_check,
      test = common.test,
      define = common.define,
      the_end = common.the_end;

setup_table('tbl', 'polyglot_arity_js7_2', 'test')
setup_table_check()

define("r.db('test')", 'db')
define("r.expr({'a':1})", 'obj')
define('r.expr([1])', 'array')
test('r.dbList(1)', 'err("ReqlCompileError", "Expected 0 arguments but found 1.", [])', 'line 13', {}, {})
test('tbl.zip(1)', 'err("ReqlCompileError", "Expected 1 argument but found 2.", [])', 'line 17', {}, {})
test('tbl.isEmpty(1)', 'err("ReqlCompileError", "Expected 1 argument but found 2.", [])', 'line 18', {}, {})
test('obj.keys(1)', 'err("ReqlCompileError", "Expected 1 argument but found 2.", [])', 'line 19', {}, {})
test('tbl.distinct(1)', 'err("ReqlCompileError", "Expected 0 arguments (not including options) but found 1.", [])', 'line 21', {}, {})
test('tbl.delete(1)', 'err("ReqlCompileError", "Expected 0 arguments (not including options) but found 1.", [])', 'line 26', {}, {})
test('r.dbCreate()', 'err("ReqlCompileError", "Expected 1 argument but found 0.", [])', 'line 36', {}, {})
test('r.dbDrop()', 'err("ReqlCompileError", "Expected 1 argument but found 0.", [])', 'line 37', {}, {})
test('r.db()', 'err("ReqlCompileError", "Expected 1 argument but found 0.", [])', 'line 38', {}, {})
test('r.floor()', 'err("ReqlCompileError", "Expected 1 argument but found 0.", [])', 'line 39', {}, {})
test('r.ceil()', 'err("ReqlCompileError", "Expected 1 argument but found 0.", [])', 'line 40', {}, {})
test('r.round()', 'err("ReqlCompileError", "Expected 1 argument but found 0.", [])', 'line 41', {}, {})
test('r.error()', 'err("ReqlQueryLogicError", "Empty ERROR term outside a default block.", [])', 'line 43', {}, {})
test('r.js()', 'err("ReqlCompileError", "Expected 1 argument (not including options) but found 0.", [])', 'line 46', {}, {})
test('r.expr()', 'err("ReqlCompileError", "Expected between 1 and 2 arguments but found 0.", [])', 'line 51', {}, {})
test('tbl.concatMap()', 'err("ReqlCompileError", "Expected 2 arguments but found 1.", [])', 'line 63', {}, {})
test('tbl.skip()', 'err("ReqlCompileError", "Expected 2 arguments but found 1.", [])', 'line 64', {}, {})
test('tbl.limit()', 'err("ReqlCompileError", "Expected 2 arguments but found 1.", [])', 'line 65', {}, {})
test('array.append()', 'err("ReqlCompileError", "Expected 2 arguments but found 1.", [])', 'line 66', {}, {})
test('array.prepend()', 'err("ReqlCompileError", "Expected 2 arguments but found 1.", [])', 'line 67', {}, {})
test('array.difference()', 'err("ReqlCompileError", "Expected 2 arguments but found 1.", [])', 'line 68', {}, {})
test('array.setInsert()', 'err("ReqlCompileError", "Expected 2 arguments but found 1.", [])', 'line 69', {}, {})
test('array.setUnion()', 'err("ReqlCompileError", "Expected 2 arguments but found 1.", [])', 'line 70', {}, {})
test('array.setIntersection()', 'err("ReqlCompileError", "Expected 2 arguments but found 1.", [])', 'line 71', {}, {})
test('array.setDifference()', 'err("ReqlCompileError", "Expected 2 arguments but found 1.", [])', 'line 72', {}, {})
test('tbl.nth()', 'err("ReqlCompileError", "Expected 2 arguments but found 1.", [])', 'line 73', {}, {})
test('tbl.forEach()', 'err("ReqlCompileError", "Expected 2 arguments but found 1.", [])', 'line 74', {}, {})
test('tbl.get()', 'err("ReqlCompileError", "Expected 2 arguments but found 1.", [])', 'line 75', {}, {})
test('r.expr([]).sample()', 'err("ReqlCompileError", "Expected 2 arguments but found 1.", [])', 'line 76', {}, {})
test('tbl.offsetsOf()', 'err("ReqlCompileError", "Expected 2 arguments but found 1.", [])', 'line 77', {}, {})
test('r.dbCreate(1,2)', 'err("ReqlCompileError", "Expected 1 argument but found 2.", [])', 'line 80', {}, {})
test('r.dbDrop(1,2)', 'err("ReqlCompileError", "Expected 1 argument but found 2.", [])', 'line 81', {}, {})
test('r.db(1,2)', 'err("ReqlCompileError", "Expected 1 argument but found 2.", [])', 'line 82', {}, {})
test('r.floor(1, 2)', 'err("ReqlCompileError", "Expected 1 argument but found 2.", [])', 'line 83', {}, {})
test('r.ceil(1, 2)', 'err("ReqlCompileError", "Expected 1 argument but found 2.", [])', 'line 84', {}, {})
test('r.round(1, 2)', 'err("ReqlCompileError", "Expected 1 argument but found 2.", [])', 'line 85', {}, {})
test('tbl.filter()', 'err("ReqlCompileError", "Expected 1 argument (not including options) but found 0.", [])', 'line 87', {}, {})
test('r.error(1, 2)', 'err("ReqlCompileError", "Expected between 0 and 1 arguments but found 2.", [])', 'line 92', {}, {})
test('db.tableDrop()', 'err("ReqlQueryLogicError", "Expected type DATUM but found DATABASE:", [])', 'line 95', {}, {})
test('db.tableCreate()', 'err("ReqlCompileError", "Expected 1 argument (not including options) but found 0.", [])', 'line 99', {}, {})
test('r.js(1,2)', 'err("ReqlCompileError", "Expected 1 argument (not including options) but found 2.", [])', 'line 104', {}, {})
test('tbl.concatMap(1,2)', 'err("ReqlCompileError", "Expected 2 arguments but found 3.", [])', 'line 111', {}, {})
test('tbl.skip(1,2)', 'err("ReqlCompileError", "Expected 2 arguments but found 3.", [])', 'line 112', {}, {})
test('tbl.limit(1,2)', 'err("ReqlCompileError", "Expected 2 arguments but found 3.", [])', 'line 113', {}, {})
test('array.append(1,2)', 'err("ReqlCompileError", "Expected 2 arguments but found 3.", [])', 'line 114', {}, {})
test('array.prepend(1,2)', 'err("ReqlCompileError", "Expected 2 arguments but found 3.", [])', 'line 115', {}, {})
test('array.difference([], [])', 'err("ReqlCompileError", "Expected 2 arguments but found 3.", [])', 'line 116', {}, {})
test('array.setInsert(1,2)', 'err("ReqlCompileError", "Expected 2 arguments but found 3.", [])', 'line 117', {}, {})
test('array.setUnion([1],[2])', 'err("ReqlCompileError", "Expected 2 arguments but found 3.", [])', 'line 118', {}, {})
test('array.setIntersection([1],[2])', 'err("ReqlCompileError", "Expected 2 arguments but found 3.", [])', 'line 119', {}, {})
test('array.setDifference([1],[2])', 'err("ReqlCompileError", "Expected 2 arguments but found 3.", [])', 'line 120', {}, {})
test('tbl.nth(1,2)', 'err("ReqlCompileError", "Expected 2 arguments but found 3.", [])', 'line 121', {}, {})
test('tbl.forEach(1,2)', 'err("ReqlCompileError", "Expected 2 arguments but found 3.", [])', 'line 122', {}, {})
test('tbl.get(1,2)', 'err("ReqlCompileError", "Expected 2 arguments but found 3.", [])', 'line 123', {}, {})
test('r.expr([]).sample(1,2)', 'err("ReqlCompileError", "Expected 2 arguments but found 3.", [])', 'line 124', {}, {})
test('tbl.offsetsOf(1,2)', 'err("ReqlCompileError", "Expected 2 arguments but found 3.", [])', 'line 125', {}, {})
test('tbl.filter(1,2,3)', 'err("ReqlCompileError", "Expected 1 argument (not including options) but found 3.", [])', 'line 127', {}, {})
test('db.tableDrop(1,2)', 'err("ReqlCompileError", "Expected between 1 and 2 arguments but found 3.", [])', 'line 132', {}, {})
test('r.expr([]).deleteAt()', 'err("ReqlCompileError", "Expected between 2 and 3 arguments but found 1.", [])', 'line 135', {}, {})
test('db.tableCreate(1,2)', 'err("ReqlCompileError", "Expected 1 argument (not including options) but found 2.", [])', 'line 138', {}, {})
test('tbl.count(1,2)', 'err("ReqlCompileError", "Expected between 1 and 2 arguments but found 3.", [])', 'line 143', {}, {})
test('tbl.update()', 'err("ReqlCompileError", "Expected 1 argument (not including options) but found 0.", [])', 'line 150', {}, {})
test('tbl.replace()', 'err("ReqlCompileError", "Expected 1 argument (not including options) but found 0.", [])', 'line 151', {}, {})
test('tbl.insert()', 'err("ReqlCompileError", "Expected 1 argument (not including options) but found 0.", [])', 'line 152', {}, {})
test('db.table()', 'err("ReqlCompileError", "Expected 1 argument (not including options) but found 0.", [])', 'line 154', {}, {})
test('tbl.reduce()', 'err("ReqlCompileError", "Expected 2 arguments but found 1.", [])', 'line 159', {}, {})
test('tbl.eqJoin()', 'err("ReqlCompileError", "Expected 2 arguments (not including options) but found 0.", [])', 'line 162', {}, {})
test('tbl.innerJoin()', 'err("ReqlCompileError", "Expected 3 arguments but found 1.", [])', 'line 169', {}, {})
test('tbl.outerJoin()', 'err("ReqlCompileError", "Expected 3 arguments but found 1.", [])', 'line 170', {}, {})
test('r.expr([]).insertAt()', 'err("ReqlCompileError", "Expected 3 arguments but found 1.", [])', 'line 171', {}, {})
test('r.expr([]).spliceAt()', 'err("ReqlCompileError", "Expected 3 arguments but found 1.", [])', 'line 172', {}, {})
test('r.expr([]).changeAt()', 'err("ReqlCompileError", "Expected 3 arguments but found 1.", [])', 'line 173', {}, {})
test('tbl.eqJoin(1)', 'err("ReqlCompileError", "Expected 2 arguments (not including options) but found 1.", [])', 'line 175', {}, {})
test('tbl.innerJoin(1)', 'err("ReqlCompileError", "Expected 3 arguments but found 2.", [])', 'line 182', {}, {})
test('tbl.outerJoin(1)', 'err("ReqlCompileError", "Expected 3 arguments but found 2.", [])', 'line 183', {}, {})
test('r.expr([]).insertAt(1)', 'err("ReqlCompileError", "Expected 3 arguments but found 2.", [])', 'line 184', {}, {})
test('r.expr([]).spliceAt(1)', 'err("ReqlCompileError", "Expected 3 arguments but found 2.", [])', 'line 185', {}, {})
test('r.expr([]).changeAt(1)', 'err("ReqlCompileError", "Expected 3 arguments but found 2.", [])', 'line 186', {}, {})
test('tbl.eqJoin(1,2,3,4)', 'err("ReqlCompileError", "Expected 2 arguments (not including options) but found 4.", [])', 'line 188', {}, {})
test('tbl.innerJoin(1,2,3)', 'err("ReqlCompileError", "Expected 3 arguments but found 4.", [])', 'line 195', {}, {})
test('tbl.outerJoin(1,2,3)', 'err("ReqlCompileError", "Expected 3 arguments but found 4.", [])', 'line 196', {}, {})
test('r.expr([]).insertAt(1, 2, 3)', 'err("ReqlCompileError", "Expected 3 arguments but found 4.", [])', 'line 197', {}, {})
test('r.expr([]).spliceAt(1, 2, 3)', 'err("ReqlCompileError", "Expected 3 arguments but found 4.", [])', 'line 198', {}, {})
test('r.expr([]).changeAt(1, 2, 3)', 'err("ReqlCompileError", "Expected 3 arguments but found 4.", [])', 'line 199', {}, {})
test('tbl.map()', 'err(\'ReqlCompileError\', "Expected 1 or more arguments but found 0.", [])', 'line 201', {}, {})
test('r.branch(1,2)', 'err("ReqlCompileError", "Expected 3 or more arguments but found 2.", [])', 'line 206', {}, {})
test('r.branch(1,2,3,4)', 'err("ReqlQueryLogicError", "Cannot call `branch` term with an even number of arguments.", [])', 'line 208', {}, {})
test('r.expr({})(1,2)', 'err(\'ReqlCompileError\', "Expected 1 argument but found 2.", [])', 'line 212', {}, {})
test("tbl.insert([{'id':0},{'id':1},{'id':2},{'id':3},{'id':4},{'id':5},{'id':6},{'id':7},{'id':8},{'id':9}]).getField('inserted')", '10', 'line 218', {}, {})
test("tbl.getAll(0, 1, 2).getField('id')", 'bag([0, 1, 2])', 'line 221', {}, {})
test("tbl.getAll(r.args([]), 0, 1, 2).getField('id')", 'bag([0, 1, 2])', 'line 224', {}, {})
test("tbl.getAll(r.args([0]), 1, 2).getField('id')", 'bag([0, 1, 2])', 'line 227', {}, {})
test("tbl.getAll(r.args([0, 1]), 2).getField('id')", 'bag([0, 1, 2])', 'line 230', {}, {})
test("tbl.getAll(r.args([0, 1, 2])).getField('id')", 'bag([0, 1, 2])', 'line 233', {}, {})
test("tbl.getAll(r.args([0]), 1, r.args([2])).getField('id')", 'bag([0, 1, 2])', 'line 236', {}, {})
test('r.branch(true, 1, r.error("a"))', '1', 'line 241', {}, {})
test('r.branch(r.args([true, 1]), r.error("a"))', '1', 'line 244', {}, {})
test('r.expr(true).branch(1, 2)', '1', 'line 247', {}, {})
test('r.branch(r.args([true, 1, r.error("a")]))', 'err("ReqlUserError", "a", [])', 'line 250', {}, {})
test("tbl.group(r.row('id').mod(2)).count({'id':0}).ungroup()", "([{'group':0, 'reduction':1}])", 'line 257', {}, {})
test("tbl.group(r.row('id').mod(2)).count(r.args([{'id':0}])).ungroup()", "([{'group':0, 'reduction':1}])", 'line 262', {}, {})
test("r.expr({'a':{'b':1}}).merge(r.args([{'a':r.literal({'c':1})}]))", "({'a':{'c':1}})", 'line 267', {}, {})
test('r.http("httpbin.org/get","bad_param")', 'err("ReqlCompileError", "Expected 1 argument (not including options) but found 2.", [])', 'line 270', {}, {})
test('r.binary("1", "2")', 'err("ReqlCompileError", "Expected 1 argument but found 2.", [])', 'line 280', {}, {})
test('r.binary()', 'err("ReqlCompileError", "Expected 1 argument but found 0.", [])', 'line 289', {}, {})
test("tbl.indexRename('idx')", "err('ReqlCompileError','Expected 2 arguments (not including options) but found 1.',[])", 'line 303', {}, {})
test("tbl.indexRename('idx','idx2','idx3')", "err('ReqlCompileError','Expected 2 arguments (not including options) but found 3.',[])", 'line 308', {}, {})
test("r.now('foo')", "err('ReqlCompileError','NOW does not accept any args.')", 'line 314', {}, {})
test('r.now(r.args([1,2,3]))', "err('ReqlCompileError','NOW does not accept any args.')", 'line 315', {}, {})

the_end()
