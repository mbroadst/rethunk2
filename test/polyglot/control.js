#!/usr/local/bin/node
// -*- coding: utf-8 -*-

'use strict';
const common = require('./common'),
      setup_table = common.setup_table,
      setup_table_check = common.setup_table_check,
      test = common.test,
      define = common.define,
      the_end = common.the_end;

setup_table('tbl', 'polyglot_control_js7_2', 'test')
setup_table('tbl2', 'polyglot_control_js7_2_tbl1', 'test')
setup_table_check()

test('r.expr(1).do(function(v) { return v.mul(2); })', '2', 'line 8', {}, {})
test('r([0, 1, 2]).do(function(v) { return v.append(3); })', '[0, 1, 2, 3]', 'line 13', {}, {})
test('r.do(1, 2, function(x, y) { return x.add(y); })', '3', 'line 18', {}, {})
test('r.do(function() { return 1; })', '1', 'line 23', {}, {})
test('r.do(1, 2, function(x) { return x; })', 'err("ReqlQueryLogicError", \'Expected function with 2 arguments but found function with 1 argument.\', [1])', 'line 29', {}, {})
test('r.do(1, 2, 3, function(x, y) { return x.add(y); })', 'err("ReqlQueryLogicError", \'Expected function with 3 arguments but found function with 2 arguments.\', [1])', 'line 34', {}, {})
test('r.do(1)', '1', 'line 38', {}, {})
test('r.do(1, function(x) {})', 'err("ReqlDriverCompileError", \'Anonymous function returned `undefined`. Did you forget a `return`?\', [1])', 'line 41', {}, {})
test('r.do(1, function(x) { return undefined; })', 'err("ReqlDriverCompileError", \'Anonymous function returned `undefined`. Did you forget a `return`?\', [1])', 'line 44', {}, {})
test('r.do()', 'err("ReqlCompileError", \'Expected 1 or more arguments but found 0.\', [1])', 'line 47', {}, {})
test("r('abc').do(function(v) { return v.append(3); })", 'err("ReqlQueryLogicError", "Expected type ARRAY but found STRING.", [1, 0])', 'line 54', {}, {})
test("r('abc').do(function(v) { return v.add(3); })", 'err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", [1, 1])', 'line 59', {}, {})
test("r('abc').do(function(v) { return v.add('def'); }).add(3)", 'err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", [1])', 'line 64', {}, {})
test('r(0).do(function(a,b) { return a.add(b); })', 'err("ReqlQueryLogicError", \'Expected function with 1 argument but found function with 2 arguments.\', [1])', 'line 69', {}, {})
test('r.do(1,2, function(a) { return a; })', 'err("ReqlQueryLogicError", \'Expected function with 2 arguments but found function with 1 argument.\', [1])', 'line 74', {}, {})
test('r.expr(5).do(r.row)', '5', 'line 78', {}, {})
test('r.branch(true, 1, 2)', '1', 'line 84', {}, {})
test('r.branch(false, 1, 2)', '2', 'line 86', {}, {})
test("r.branch(1, 'c', false)", '("c")', 'line 88', {}, {})
test('r.branch(null, {}, [])', '([])', 'line 90', {}, {})
test("r.branch(r.db('test'), 1, 2)", 'err("ReqlQueryLogicError", "Expected type DATUM but found DATABASE:", [])', 'line 93', {}, {})
test('r.branch(tbl, 1, 2)', 'err("ReqlQueryLogicError", "Expected type DATUM but found TABLE:", [])', 'line 95', {}, {})
test('r.branch(r.error("a"), 1, 2)', 'err("ReqlUserError", "a", [])', 'line 97', {}, {})
test('r.branch([], 1, 2)', '1', 'line 100', {}, {})
test('r.branch({}, 1, 2)', '1', 'line 102', {}, {})
test('r.branch("a", 1, 2)', '1', 'line 104', {}, {})
test('r.branch(1.2, 1, 2)', '1', 'line 106', {}, {})
test('r.branch(true, 1, true, 2, 3)', '1', 'line 109', {}, {})
test('r.branch(true, 1, false, 2, 3)', '1', 'line 111', {}, {})
test('r.branch(false, 1, true, 2, 3)', '2', 'line 113', {}, {})
test('r.branch(false, 1, false, 2, 3)', '3', 'line 115', {}, {})
test('r.branch(true, 1, true, 2)', 'err("ReqlQueryLogicError", "Cannot call `branch` term with an even number of arguments.")', 'line 118', {}, {})
test("r.error('Hello World')", 'err("ReqlUserError", "Hello World", [0])', 'line 122', {}, {})
test('r.error(5)', 'err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", [0])', 'line 125', {}, {})
test('r.expr([1, 2, 3]).filter()', 'err("ReqlCompileError", "Expected 1 argument (not including options) but found 0.", [0])', 'line 130', {}, {})
test('r.expr([1, 2, 3]).filter(1, 2)', 'err("ReqlCompileError", "Expected 1 argument (not including options) but found 2.", [0])', 'line 134', {}, {})
test("r.js('1 + 1')", '2', 'line 140', {}, {})
test("r.js('1 + 1; 2 + 2')", '4', 'line 143', {}, {})
test("r.do(1, 2, r.js('(function(a, b) { return a + b; })'))", '3', 'line 146', {}, {})
test("r.expr(1).do(r.js('(function(x) { return x + 1; })'))", '2', 'line 149', {}, {})
test('r.expr(\'foo\').do(r.js(\'(function(x) { return x + "bar"; })\'))', "'foobar'", 'line 152', {}, {})
test("r.js('1 + 2', {timeout:1.2})", '3', 'line 156', {}, {})
test("r.js('(function() { return 1; })')", 'err("ReqlQueryLogicError", "Query result must be of type DATUM, GROUPED_DATA, or STREAM (got FUNCTION).", [0])', 'line 161', {}, {})
test("r.js('function() { return 1; }')", 'err("ReqlQueryLogicError", "SyntaxError: Unexpected token (", [0])', 'line 164', {}, {})
test("r.do(1, 2, r.js('(function(a) { return a; })'))", '1', 'line 168', {}, {})
test("r.do(1, 2, r.js('(function(a, b, c) { return a; })'))", '1', 'line 171', {}, {})
test("r.do(1, 2, r.js('(function(a, b, c) { return c; })'))", 'err("ReqlQueryLogicError", "Cannot convert javascript `undefined` to ql::datum_t.", [0])', 'line 174', {}, {})
test("r.expr([1, 2, 3]).filter(r.js('(function(a) { return a >= 2; })'))", '([2, 3])', 'line 177', {}, {})
test("r.expr([1, 2, 3]).map(r.js('(function(a) { return a + 1; })'))", '([2, 3, 4])', 'line 180', {}, {})
test("r.expr([1, 2, 3]).map(r.js('1'))", 'err("ReqlQueryLogicError", "Expected type FUNCTION but found DATUM:", [0])', 'line 183', {}, {})
test("r.expr([1, 2, 3]).filter(r.js('(function(a) {})'))", 'err("ReqlQueryLogicError", "Cannot convert javascript `undefined` to ql::datum_t.", [0])', 'line 186', {}, {})
test('r.expr([1, 2, 3]).map(1)', 'err("ReqlQueryLogicError", "Expected type FUNCTION but found DATUM:", [0])', 'line 190', {}, {})
test("r.expr([1, 2, 3]).filter('foo')", '([1, 2, 3])', 'line 193', {}, {})
test('r.expr([1, 2, 4]).filter([])', '([1, 2, 4])', 'line 195', {}, {})
test('r.expr([1, 2, 3]).filter(null)', '([])', 'line 197', {}, {})
test('r.expr([1, 2, 4]).filter(false)', '([])', 'line 200', {}, {})
test('tbl.count()', '0', 'line 205', {}, {})
test('r([1, 2, 3]).forEach(function (row) { return tbl.insert({ id:row }) })', "({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':3})", 'line 209', {}, {})
test('tbl.count()', '3', 'line 214', {}, {})
test('r([1, 2, 3]).forEach(function (row) { return tbl.update({ foo:row }) })', "({'deleted':0.0,'replaced':9,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':0.0})", 'line 218', {}, {})
test('r([1, 2, 3]).forEach(function (row) { return [tbl.insert({ id:row }), tbl.insert({ id:row.mul(10) })] })', '({\'first_error\':"Duplicate primary key `id`:\\n{\\n\\t\\"foo\\":\\t3,\\n\\t\\"id\\":\\t1\\n}\\n{\\n\\t\\"id\\":\\t1\\n}",\'deleted\':0.0,\'replaced\':0.0,\'unchanged\':0.0,\'errors\':3,\'skipped\':0.0,\'inserted\':3})', 'line 224', {}, {})
test('tbl.count()', '6', 'line 229', {}, {})
test('tbl2.count()', "", 'line 232', {}, {'variable': 'tableCount'})
test('r.expr([1, 2, 3]).forEach( tbl2.insert({}) )', "({'deleted':0.0,'replaced':0.0,'generated_keys':arrlen(3,uuid()),'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':3})", 'line 233', {}, {})
test('tbl2.count()', 'tableCount + 1', 'line 236', {}, {})
test('r([1, 2, 3]).forEach(function (row) { return [tbl.update({ foo:row }), tbl.update({ bar:row })] })', "({'deleted':0.0,'replaced':36,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':0.0})", 'line 240', {}, {})
test("r.expr([1, 2, 3]).forEach( tbl2.insert({ 'id':r.row }) )", "({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':3})", 'line 246', {}, {})
test('r.expr([1, 2, 3]).forEach(1)', 'err("ReqlQueryLogicError", "FOR_EACH expects one or more basic write queries.  Expected type ARRAY but found NUMBER.", [0])', 'line 250', {}, {})
test('r([1, 2, 3]).forEach(function (x) { return x; })', 'err("ReqlQueryLogicError", "FOR_EACH expects one or more basic write queries.  Expected type ARRAY but found NUMBER.", [1, 1])', 'line 254', {}, {})
test('r.expr([1, 2, 3]).forEach(r.row)', 'err("ReqlQueryLogicError", "FOR_EACH expects one or more basic write queries.  Expected type ARRAY but found NUMBER.", [1, 1])', 'line 258', {}, {})
test('r([1, 2, 3]).forEach(function (row) { return tbl; })', 'err("ReqlQueryLogicError", "FOR_EACH expects one or more basic write queries.", [1, 1])', 'line 262', {}, {})
test('r([1, 2, 3]).forEach(function (row) {})', 'err("ReqlDriverCompileError", \'Anonymous function returned `undefined`. Did you forget a `return`?\', [1])', 'line 268', {}, {})
test("r.expr(1).do(tbl.insert({'foo':r.row}))", "({'deleted':0.0,'replaced':0.0,'generated_keys':arrlen(1,uuid()),'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})", 'line 272', {}, {})
test("r.expr([1, 2]).nth(0).do(tbl.insert({'foo':r.row}))", "({'deleted':0.0,'replaced':0.0,'generated_keys':arrlen(1,uuid()),'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})", 'line 277', {}, {})
test("r.expr([1, 2]).map(tbl.insert({'foo':r.row}))", "err('ReqlCompileError', 'Cannot nest writes or meta ops in stream operations.  Use FOR_EACH instead.', [0])", 'line 281', {}, {})
test("r.expr([1, 2]).map(r.db('test').tableCreate('table_create_failure'))", "err('ReqlCompileError', 'Cannot nest writes or meta ops in stream operations.  Use FOR_EACH instead.', [0])", 'line 285', {}, {})
test("r.expr([1, 2]).map(tbl.insert({'foo':r.row}).getField('inserted'))", "err('ReqlCompileError', 'Cannot nest writes or meta ops in stream operations.  Use FOR_EACH instead.', [0])", 'line 288', {}, {})
test("r.expr([1, 2]).map(tbl.insert({'foo':r.row}).getField('inserted').add(5))", "err('ReqlCompileError', 'Cannot nest writes or meta ops in stream operations.  Use FOR_EACH instead.', [0])", 'line 292', {}, {})
test("r.expr(1).do(r.db('test').tableCreate('table_create_success'))", "partial({'tables_created':1})", 'line 296', {}, {})
test('r.expr([1, 2])', '[1, 2]', 'line 300', {'read_mode': "[ 'a', 'b' ]"}, {})

the_end()
