#!/usr/local/bin/node
// -*- coding: utf-8 -*-

'use strict';
const common = require('./common'),
      setup_table = common.setup_table,
      setup_table_check = common.setup_table_check,
      test = common.test,
      define = common.define,
      the_end = common.the_end;

setup_table_check()

test('r.expr(1).default(2)', '1', 'line 3', {}, {})
test('r.expr(null).default(2)', '2', 'line 5', {}, {})
test("r.expr({})('b').default(2)", '2', 'line 8', {}, {})
test("r.expr(r.expr('a')('b')).default(2)", 'err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\\"a\\"`.", [])', 'line 11', {}, {})
test('r.expr([]).reduce(function(a,b){return a+b}).default(2)', '2', 'line 15', {}, {})
test('r.expr([]).union([]).reduce(function(a,b){return a+b}).default(2)', '2', 'line 19', {}, {})
test("r.expr('a').reduce(function(a,b){return a+b}).default(2)", 'err("ReqlQueryLogicError", "Cannot convert STRING to SEQUENCE", [])', 'line 23', {}, {})
test('(r.expr(null).add(5)).default(2)', '2', 'line 26', {}, {})
test('(r.expr(5).add(null)).default(2)', '2', 'line 29', {}, {})
test('(r.expr(5).sub(null)).default(2)', '2', 'line 32', {}, {})
test('(r.expr(null).sub(5)).default(2)', '2', 'line 35', {}, {})
test("(r.expr('a').add(5)).default(2)", 'err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", [])', 'line 38', {}, {})
test("(r.expr(5).add('a')).default(2)", 'err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", [])', 'line 41', {}, {})
test("(r.expr('a').sub(5)).default(2)", 'err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", [])', 'line 44', {}, {})
test("(r.expr(5).sub('a')).default(2)", 'err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", [])', 'line 47', {}, {})
test('r.expr(1).default(r.error())', '1', 'line 50', {}, {})
test('r.expr(null).default(r.error())', '(null)', 'line 52', {}, {})
test("r.expr({})('b').default(r.error())", 'err("ReqlNonExistenceError", "No attribute `b` in object:", [])', 'line 55', {}, {})
test('r.expr([]).reduce(function(a,b){return a+b}).default(r.error)', 'err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", [])', 'line 59', {}, {})
test('r.expr([]).union([]).reduce(function(a,b){return a+b}).default(r.error)', 'err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", [])', 'line 63', {}, {})
test('(r.expr(null).add(5)).default(r.error)', 'err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", [])', 'line 66', {}, {})
test('(r.expr(5).add(null)).default(r.error)', 'err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", [])', 'line 69', {}, {})
test('(r.expr(5).sub(null)).default(r.error)', 'err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", [])', 'line 72', {}, {})
test('(r.expr(null).sub(5)).default(r.error)', 'err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", [])', 'line 75', {}, {})
test('r.expr(1).default(function(e){return e})', '1', 'line 80', {}, {})
test('r.expr(null).default(function(e){return e})', '(null)', 'line 84', {}, {})
test("r.expr({})('b').default(function(e){return e})", '"No attribute `b` in object:\\n{}"', 'line 88', {}, {})
test('r.expr([]).reduce(function(a,b){return a+b}).default(function(e){return e})', '("Cannot reduce over an empty stream.")', 'line 92', {}, {})
test('r.expr([]).union([]).reduce(function(a,b){return a+b}).default(function(e){return e})', '("Cannot reduce over an empty stream.")', 'line 96', {}, {})
test('(r.expr(null).add(5)).default(function(e){return e})', '("Expected type NUMBER but found NULL.")', 'line 100', {}, {})
test('(r.expr(5).add(null)).default(function(e){return e})', '("Expected type NUMBER but found NULL.")', 'line 104', {}, {})
test('(r.expr(5).sub(null)).default(function(e){return e})', '("Expected type NUMBER but found NULL.")', 'line 108', {}, {})
test('(r.expr(null).sub(5)).default(function(e){return e})', '("Expected type NUMBER but found NULL.")', 'line 112', {}, {})
define("r.expr([{'a':1},{'a':null},{}]).orderBy('a')", 'arr')
test("arr.filter(function(x){return x('a').eq(1)})", "[{'a':1}]", 'line 119', {}, {})
test("arr.filter(function(x){return x('a').eq(1)}, {'default':false})", "[{'a':1}]", 'line 123', {}, {})
test("arr.filter(function(x){return x('a').eq(1)}, {'default':true})", "[{}, {'a':1}]", 'line 127', {}, {})
test("arr.filter(function(x) { return x('a').eq(1) }, { 'default':r.js('true') })", "[{}, {'a':1}]", 'line 132', {}, {})
test("arr.filter(function(x) { return x('a').eq(1) }, { 'default':r.js('false') })", "[{'a':1}]", 'line 136', {}, {})
test("arr.filter(function(x){return x('a').eq(1)}, {'default':r.error()})", 'err("ReqlNonExistenceError", "No attribute `a` in object:", [])', 'line 140', {}, {})
test("r.expr(false).do(function(d){return arr.filter(function(x){return x('a').eq(1)}, {default:d})})", "[{'a':1}]", 'line 145', {}, {})
test("r.expr(true).do(function(d){return arr.filter(function(x){return x('a').eq(1)}, {default:d})}).orderBy('a')", "[{}, {'a':1}]", 'line 149', {}, {})
test("arr.filter(function(x){return x('a').default(0).eq(1)})", "[{'a':1}]", 'line 155', {}, {})
test("arr.filter(function(x){return x('a').default(1).eq(1)}).orderBy('a')", "([{}, {'a':null}, {'a':1}])", 'line 159', {}, {})
test("arr.filter(function(x){return x('a').default(r.error()).eq(1)})", "[{'a':1}]", 'line 163', {}, {})
test("r.expr(0).do(function(i){return arr.filter(function(x){return x('a').default(i).eq(1)})})", "[{'a':1}]", 'line 169', {}, {})
test("r.expr(1).do(function(i){return arr.filter(function(x){return x('a').default(i).eq(1)})}).orderBy('a')", "([{},{'a':null},{'a':1}])", 'line 173', {}, {})
test("arr.filter(function(x){return x('a').eq(1).or(x('a')('b').eq(2))})", "[{'a':1}]", 'line 178', {}, {})
test("arr.filter(function(x){return x('a').eq(1).or(x('a')('b').eq(2))}, {default:false})", "[{'a':1}]", 'line 182', {}, {})
test("arr.filter(function(x){return x('a').eq(1).or(x('a')('b').eq(2))}, {default:true}).orderBy('a')", "([{}, {'a':null}, {'a':1}])", 'line 186', {}, {})
test("arr.filter(function(x){return x('a').eq(1).or(x('a')('b').eq(2))}, {default:r.error()})", 'err("ReqlNonExistenceError", "No attribute `a` in object:", [])', 'line 190', {}, {})
test("r.tableCreate('default_test')", "partial({'tables_created':1})", 'line 193', {}, {})
test("r.table('default_test').insert(arr)", "({'deleted':0,'replaced':0,'generated_keys':arrlen(3,uuid()),'unchanged':0,'errors':0,'skipped':0,'inserted':3})", 'line 196', {}, {})
define("r.table('default_test').orderBy('a').pluck('a')", 'tbl')
test("tbl.filter(function(x){return x('a').eq(1)})", "[{'a':1}]", 'line 203', {}, {})
test("tbl.filter(function(x){return x('a').eq(1)}, {'default':false})", "[{'a':1}]", 'line 207', {}, {})
test("tbl.filter(function(x){return x('a').eq(1)}, {'default':true})", "[{}, {'a':1}]", 'line 211', {}, {})
test("tbl.filter(function(x){return x('a').eq(1)}, {'default':r.error()})", 'err("ReqlNonExistenceError", "No attribute `a` in object:", [])', 'line 216', {}, {})
test("r.expr(false).do(function(d){return tbl.filter(function(x){return x('a').eq(1)}, {default:d})})", "[{'a':1}]", 'line 221', {}, {})
test("r.expr(true).do(function(d){return tbl.filter(function(x){return x('a').eq(1)}, {default:d})}).orderBy('a')", "[{}, {'a':1}]", 'line 225', {}, {})
test("tbl.filter(function(x){return x('a').default(0).eq(1)})", "[{'a':1}]", 'line 231', {}, {})
test("tbl.filter(function(x){return x('a').default(1).eq(1)}).orderBy('a')", "([{}, {'a':null}, {'a':1}])", 'line 235', {}, {})
test("tbl.filter(function(x){return x('a').default(r.error()).eq(1)})", "[{'a':1}]", 'line 239', {}, {})
test("r.expr(0).do(function(i){return tbl.filter(function(x){return x('a').default(i).eq(1)})})", "[{'a':1}]", 'line 245', {}, {})
test("r.expr(1).do(function(i){return tbl.filter(function(x){return x('a').default(i).eq(1)})}).orderBy('a')", "([{},{'a':null},{'a':1}])", 'line 249', {}, {})
test("tbl.filter(function(x){return x('a').eq(1).or(x('a')('b').eq(2))})", "[{'a':1}]", 'line 254', {}, {})
test("tbl.filter(function(x){return x('a').eq(1).or(x('a')('b').eq(2))}, {default:false})", "[{'a':1}]", 'line 258', {}, {})
test("tbl.filter(function(x){return x('a').eq(1).or(x('a')('b').eq(2))}, {default:true}).orderBy('a')", "([{}, {'a':null}, {'a':1}])", 'line 262', {}, {})
test("tbl.filter(function(x){return x('a').eq(1).or(x('a')('b').eq(2))}, {default:r.error()})", 'err("ReqlNonExistenceError", "No attribute `a` in object:", [])', 'line 266', {}, {})
test("r.tableDrop('default_test')", "partial({'tables_dropped':1})", 'line 269', {}, {})

the_end()
